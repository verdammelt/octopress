<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Code And Cocktails]]></title>
  <link href="http://code-and-cocktails.heroku.com/atom.xml" rel="self"/>
  <link href="http://code-and-cocktails.heroku.com/"/>
  <updated>2020-10-21T09:01:10-04:00</updated>
  <id>http://code-and-cocktails.heroku.com/</id>
  <author>
    <name><![CDATA[Mark Simpson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Writing Mix Tasks for Fun and Profit.]]></title>
    <link href="http://code-and-cocktails.heroku.com/blog/2017/03/10/how-to-write-a-mix-task/"/>
    <updated>2017-03-10T07:11:29-05:00</updated>
    <id>http://code-and-cocktails.heroku.com/blog/2017/03/10/how-to-write-a-mix-task</id>
    <content type="html"><![CDATA[<p>I’m beginning to learn a little Elixir &amp; Phoenix and I ran into a case
where I wish I had a Mix task for something. Specifically I wanted to
run <code>npm</code> scripts with mix so I’d only have one command to run instead
of both <code>mix</code> and <code>npm</code> for my toy Phoenix project.</p>

<p>Writing a Mix task is reasonably straightforward with only a few
steps:</p>

<ol>
  <li>If you want to create a mix task called “echo” then create a module
called <code>Mix.Tasks.Echo</code>. The task name seen in <code>mix help</code> is based
upon the name of the module minus <code>Mix.Tasks</code>. (The module needs to
be called <code>Mix.Tasks.Something</code> otherwise <code>mix</code> will not see it.)</li>
  <li>Add <code>use Mix.Task</code> to this module.</li>
  <li>Write a public method called <code>run</code>. It has the type signature:
<code>run([binary]) :: any</code>. That means that it will get a list of
strings (the command line arguments) and can return anything.</li>
  <li>Add a <code>@shortdoc</code>. This will be used as the text in <code>mix
help</code>. Without this your task will not appear in <code>mix help</code> but
will still be usable.</li>
  <li>Optionally add a <code>@moduledoc</code>. This will be used if you run <code>mix
help YOURTASK</code></li>
</ol>

<p>You can put this module where ever you want in <code>lib</code> but typically you
would put it into <code>lib/mix/tasks</code>.</p>

<p>That’s it.</p>

<p>An interesting thing I found was that step #2 was not actually needed.
That behaviour defines <code>@shortdoc</code> so without it you cannot use
<code>@shortdoc</code> to add the task to <code>mix help</code> output.</p>

<p>Since I was creating a mix task for use in a build I needed to make
sure that if the task was not successful that <code>mix</code> would return an
error code so that the shell could see the error and fail a build. At
first I assumed that the return value of the task was how that would
be done; however I didn’t find much documentation about this. I
experimented with some likely return values like <code>:error</code> or <code>{:error,
"something"}</code> but that had no effect, it always returned a zero exit
status to the shell. Ultimately I choose to raise an error when the
task didn’t work and that definitely caused a non-zero exit status.</p>

<p>If you want to see the end of result of this experimentation you can
check out my <em>first ever hex package</em>:
<a href="https://hex.pm/packages/mix_npm">mix-npm</a>. The source can be found
in the GitHub repository:
<a href="https://github.com/verdammelt/mix_npm">verdammelt/mix_npm</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning From My Apprentice]]></title>
    <link href="http://code-and-cocktails.heroku.com/blog/2016/05/24/learning-from-my-apprentice/"/>
    <updated>2016-05-24T19:43:37-04:00</updated>
    <id>http://code-and-cocktails.heroku.com/blog/2016/05/24/learning-from-my-apprentice</id>
    <content type="html"><![CDATA[<p>My company, Cyrus Innovation, has started an Apprenticeship program.
This program involves bringing on people who are brand new to
programming and pair them with a Senior developer to train them in
good practices. About a month ago I ‘acquired’ an Apprentice:
<a href="https://paigelearnscode.wordpress.com/">Paige</a>.</p>

<p>I’ve never done this sort of thing before and I quickly came to
realize that the relationship wasn’t just Master &amp; Apprentice but
really Apprentice-Master &amp; Apprentice. I am not only learning as I go
what it means to have an Apprentice but also learning <em>from</em> my
Apprentice.</p>

<p>Even more than normally during pair-programming I feel I need to
explain myself. Not only explaining how to do something in the
programming language, but how to do it with our tools, and how we’ll
do something in the context of our team. Add to that explaining the
<em>why</em> of it all as well. This exercise helps me remember and
reconsider why <em>I</em> do things the way I do, why they are important.</p>

<p>This also brings to light good practices which I have chosen <em>not</em> to
do in this current situation. Perhaps there are reasons, perhaps those
reasons are good, sometimes they are not. By having to explain the
trade-offs and reconsider the bad reasons I am learning why I make
these decisions.</p>

<p>Also by embodying some good behaviors she is teaching me some tricks
about how to learn. She is a careful attentive listener, always asking
questions to get clarification. She also tests her knowledge by
sharing what she does know (even if not sure) which either adds to the
collective knowledge or is corrected.</p>

<p>So I hope she is learning something by pair-programming with me; but I
know I’m learning something from her.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quickie: Less Columns on Your Board]]></title>
    <link href="http://code-and-cocktails.heroku.com/blog/2016/04/25/quickie-less-columns-on-your-board/"/>
    <updated>2016-04-25T20:52:08-04:00</updated>
    <id>http://code-and-cocktails.heroku.com/blog/2016/04/25/quickie-less-columns-on-your-board</id>
    <content type="html"><![CDATA[<p>So you have a “Agile Board”(TM) congratulations! If you are like any
of the people I’ve worked with recently you’ve got lots of columns to
keep track of all the possible states a story card could be in.</p>

<p>Back away from the board…</p>

<p>You should start with very few columns. I think four should be plenty:</p>

<ul>
  <li><code>Backlog</code></li>
  <li><code>Current</code></li>
  <li><code>Doing</code></li>
  <li><code>Done</code></li>
</ul>

<p><code>Backlog</code> is the place to keep all your new ideas. Make sure the next
priorities are at the top and ready to go, as you go down the list
don’t worry about the rest too much, they can stay vague.</p>

<p><code>Current</code> is for the things you are planning on doing this
iteration. Use the Goldilocks principle. Don’t agree to do too much
or too little. Just the Right(TM) amount.</p>

<p><code>Doing</code> is for things that are being worked on <em>RIGHT NOW</em>. A good
number of items here is a function of the number of people on your
team and how they collaborate (pairing, mobbing, solo if you must). If
there are too few or too many items there is a problem - discuss
it. If something stays here for days that is the sign of a problem -
discuss it.</p>

<p><code>Done</code> is for keeping track of the valuable things you are delivering
as a team. Rejoice. Throw them away after sufficient rejoicing
(sometime after the next iteration starts is a good time).</p>

<p>What about <code>Ready for QA</code>? or <code>Ready for Deploy</code>? you ask. I’d ask why
isn’t QA and/or Deploy part of your definition of done?</p>

<p>What about <code>Blocked</code>. OK this one <em>might</em> be useful. But a red sticky
(or equivalent for non-physical boards) on the card is probably
enough. Moving it to another column makes it less visible, and a card
being blocked is a problem and we want problems to be visible.</p>

<p>Of course it is <em>your</em> process not mine. Use the columns <em>you</em>
need. But know <em>why</em> you need them, and feel free to add and remove
them if after discussion you realize the board is not serving <em>you</em>
anymore.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Craftsperson and Their Tools]]></title>
    <link href="http://code-and-cocktails.heroku.com/blog/2016/02/28/the-craftsperson-and-their-tools/"/>
    <updated>2016-02-28T14:20:42-05:00</updated>
    <id>http://code-and-cocktails.heroku.com/blog/2016/02/28/the-craftsperson-and-their-tools</id>
    <content type="html"><![CDATA[<p>When I think of how “Craftspeople” do their work I think of
tools. Good tools. They pick good tools because they know that it is
easier to get the job done when you have the right tool, and it is
well made. They don’t use a tool that is the wrong size for them, the
tool fits their hand. They may also modify their tools to better fit
their hand.</p>

<p>Sometimes a craftsperson will make entirely new tools for their
work. It might be a special jig for cutting the same type of cut in a
lot of lumber, or for drilling the same sort of hole. Sometimes these
special jigs even come into common use, such as a door lock
installation jig, or a mitre box.</p>

<p>Because a craftsperson uses their own tools, and special tools, they
might seem to have a handicap when they don’t have those tools. But a
unless the job cannot be done except with a particular tool (it is
very difficult to cut a piece of wood with a hammer), they <em>can</em> still
get the job done (albeit perhaps a bit slower).</p>

<p>This is because they know how to do the job; the tools are just <em>how</em>
they go about it.</p>

<p>Some people think that the idiom: “A poor craftsman blames his tools.”
implies that tools are not important. This does not mean that tools
are not important! This means that a craftsperson knows that the
failure to do a good job is not the fault of the tool; but the fault
of the craftsperson: their skill, or their <em>choice</em> of tool.</p>

<p>Do you pick the right tool for the job? Do you change it to fit your
hand? Do you make special tools for the work?</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gotcha of Using YouTubePlayerFragment and ViewPager for Android]]></title>
    <link href="http://code-and-cocktails.heroku.com/blog/2016/01/10/gotcha-of-using-youtubeplayerfragment-at-viewpager-for-android/"/>
    <updated>2016-01-10T17:19:50-05:00</updated>
    <id>http://code-and-cocktails.heroku.com/blog/2016/01/10/gotcha-of-using-youtubeplayerfragment-at-viewpager-for-android</id>
    <content type="html"><![CDATA[<p><small>(Cross posted to the <a href="http://www.cyrusinnovation.com/gotcha-of-using-youtubeplayerfragment-and-viewpager-for-android/">Cyrus Innovation Blog</a>)</small></p>

<p>Recently I learned some Android programming by writing a simple app
for a client. It was a great opportunity to learn the platform and how
“easy” it is to write an app. I ran into one ‘gotcha’ that I thought
might be valuable to others.</p>

<p>One feature that was needed was a swipeable carousel of YouTube
videos. Google provides some widgets for showing YouTube videos on an
Android device and
<a href="https://developers.google.com/youtube/android/player/reference/com/google/android/youtube/player/YouTubePlayerFragment?hl=en">YouTubePlayerFragment</a>
was a (almost) perfect fit for my needs<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup>. Also
<a href="http://developer.android.com/reference/android/support/v4/view/ViewPager.html">ViewPager</a>
was just the thing for creating the swipeable list of items. It was
easy enough to create a subclass of
<a href="http://developer.android.com/reference/android/support/v4/app/FragmentPagerAdapter.html">FragmentPageAdapter</a>
which knew the list of videos and created YouTubePlayerFragments as
needed (actually a subclass whose job was to handle the initialization
of the YouTubePlayerFragment).</p>

<p>While this was easy to code - it was not so easy to make it actually
<em>work</em>.</p>

<p>Trying to play videos resulted in a cryptic message about the player
not playing because it was not visible on the screen. The coordinates
in the error message made it seem like the object was way to the left
of the visible screen. That was the first clue. It was perplexing
though since the player was quite obviously right there <em>on the
screen</em>.</p>

<p>Some debugging gave me the second clue I needed. When I pressed play
on the player on the screen, <em>multiple</em> players were firing events
saying that they were playing. <em>Multiple</em> players?</p>

<p>Reading<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup> into the documentation of ViewPager some more told me that
it will request multiple views from the ViewPageAdapter, so that other
views are “ready to go”. But why did they all respond when I clicked
on one of them?</p>

<p>More debugging did not solve the mystery but solidified my hypothesis:
The YouTubePlayer and/or YouTubePlayerFragment has state shared
between all their instances. That is the only explanation that would
fit the observed behavior.</p>

<p>So I needed a way to ensure that only one YouTubePlayer was in play at
a time. The ViewPager documentation says you can change the number of
other pages that will be created. Changing that did not work for me -
at least one other view was always created. That left me with ensuring
that only one player was <em>initialized</em>.</p>

<p>I tried various event listeners but found that none of them fit the
need. Sometimes I would get an event firing both on the active and the
inactive viewer and it was not possible to tell the difference.
Finally I found one thing that did seem consistent and usable:
<code>setUserVisibleHint</code>. It was called on the fragment with a <code>true</code>
value when that fragment was the one shown to the user and was called
with <code>false</code> when it was not. So I made sure my fragment was not
initialized until it got told that it was visible; and then released
it when it was no longer visible.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>Except for the supremely annoying fact that the YouTube player
widgets <em>DO NOT WORK</em> on emulators. So I had to do all this work
with a physical device tethered to my machine. Like a savage. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p><a href="http://www.rif.org/">Reading is Fundamental</a> <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Initial Emacs Setup for React/ReactNative]]></title>
    <link href="http://code-and-cocktails.heroku.com/blog/2016/01/10/emacs-setup-for-react-slash-reactnative/"/>
    <updated>2016-01-10T16:09:42-05:00</updated>
    <id>http://code-and-cocktails.heroku.com/blog/2016/01/10/emacs-setup-for-react-slash-reactnative</id>
    <content type="html"><![CDATA[<p><small>(Cross posted to the <a href="http://www.cyrusinnovation.com/initial-emacs-setup-for-reactreactnative/">Cyrus Innovation Blog</a>)</small></p>

<p>It looks likely that I’ll be doing some ReactNative work soon so I
took some time to start setting up my Emacs environment. All my
relevant setup can be found in the
<a href="https://github.com/verdammelt/dotfiles/blob/master/.emacs.d/init-react.el">init-react.el file in my GitHub dotfiles repository</a>.
This is likely to change so the previous link may not match the code
below. The code below matches specifically the
<a href="https://github.com/verdammelt/dotfiles/commit/59e7728c3743961b49fcdd8012703c4a46b9ee65">initial version (59e7728)</a>.</p>

<p>Hereinbelow I will add more annotation to those already found in that
file along with snippets of code.</p>

<p>The first thing that needed to be set up was a mode for React code.
React code files can mix Javascript with HTML markup and it does not
appear that <code>js-mode</code> (the built-in JavaScript mode) handles that.
After a short Googling it looks like
<a href="http://web-mode.org/"><code>web-mode</code></a> is a mode that can handle it. After
some brief testing it does appear to work reasonably. It appears that
the React/ReactNative community has not decided to use <code>*.js</code> or
<code>*.jsx</code> as the extension for the code files and since <code>web-mode</code>
appears to handle JavaScript just fine I chose to use it in all cases.</p>

<pre><code class="language-lisp">(add-to-list 'auto-mode-alist '("\\.jsx?$" . web-mode))
</code></pre>

<p>The next thing I wanted to get set up was a linter. I thought this
especially important as React uses an ES6 dialect of JavaScript which I
am not entirely familiar with yet and a linter can help me “do the
right thing”. With a suggestion from a coworker (who has done some
React work) I chose <a href="http://eslint.org/">ESLint</a> with the
<a href="https://www.npmjs.com/package/eslint-config-airbnb">AirBnB</a>
configuration settings. These defaults prompted me to standardize on two
spaces for indentation. (Setting <code>js-indent-level</code> as js-mode is still
in use for JSON files.)</p>

<pre><code class="language-lisp">  (setq web-mode-markup-indent-offset 2
        web-mode-css-indent-offset 2
        web-mode-code-indent-offset 2)
  (setq js-indent-level 2)
</code></pre>

<p>Setting up the linter to run via <a href="http://www.flycheck.org/">flycheck</a>
took a small amount of work since I don’t like to install project
specific tools globally. (I know that this is contrary to current
mores, but I have been tripped up by global vs. local installations
before so I shy away from them when I can.)</p>

<p>First I needed to integrate NVM with Emacs so that Emacs could run
ESLint at all.</p>

<pre><code class="language-lisp">(require 'nvm)
(nvm-use (caar (last (nvm--installed-versions))))
</code></pre>

<p>(The choice to use the last version found is totally arbitrary. If and
when I get more versions of Node.js on my machine I’ll have to make a
more careful choice.)</p>

<p>Next I hooked into <a href="http://batsov.com/projectile/">projectile</a> to look
for a locally installed ESLint and use it if found. The
<code>projectile-after-switch-project-hook</code> functions are called <em>after</em>
Projectile has switched directories to the project so one can simply
check the project for the desired file.</p>

<pre><code class="language-lisp">(add-hook 'projectile-after-switch-project-hook 'mjs/setup-local-eslint)

(defun mjs/setup-local-eslint ()
    "If ESLint found in node_modules directory - use that for flycheck.
Intended for use in PROJECTILE-AFTER-SWITCH-PROJECT-HOOK."
    (interactive)
    (let ((local-eslint (expand-file-name "./node_modules/.bin/eslint")))
      (setq flycheck-javascript-eslint-executable
            (and (file-exists-p local-eslint) local-eslint))))
</code></pre>

<p>(Note: the function is interactive because I found at least a few
times I was looking at a JavaScript file which I had come to <em>not</em> via
projectile. By making it interactive lets me use it manually in the
rare case I need to.)</p>

<p>Flycheck’s ESLint integration is limited to only certain modes and
<code>web-mode</code> is not one of them so I needed to add that to the
white-list of modes</p>

<pre><code class="language-lisp">  (with-eval-after-load 'flycheck
    (push 'web-mode (flycheck-checker-get 'javascript-eslint 'modes))))
</code></pre>

<p>With that I can easily write React/ReactNative code with all the bells
and whistles I like.</p>

<p>Later I will add support for building and testing I’m sure. But first
I need to determine what building &amp; testing in a ReactNative
environment will even look like.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Life Span]]></title>
    <link href="http://code-and-cocktails.heroku.com/blog/2015/12/28/software-life-span/"/>
    <updated>2015-12-28T08:28:18-05:00</updated>
    <id>http://code-and-cocktails.heroku.com/blog/2015/12/28/software-life-span</id>
    <content type="html"><![CDATA[<p><small>(Cross posted to the <a href="http://www.cyrusinnovation.com/software-life-span/">Cyrus Innovation Blog</a>)</small></p>

<blockquote>
  <p>Software maintenance is an extremely important but highly neglected
activity.</p>
</blockquote>

<p>…says Boehm<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup> in the midst of a long paper about the current and
possible future state of Software Engineering at the end of 1976. I
think this statement is just as true today as it was almost 40 years
ago when Boehm wrote it.</p>

<p>Boehm defines Software Maintenance as “the process of modifying
existing operational software while leaving its primary functions
intact.” (which sounds a lot like what we now call Refactoring). He
states the Maintenance has three main ‘functions’ which imply certain
needs:</p>

<blockquote>
  <ul>
    <li>Understanding the existing software: This implies the need
for…well-structured and well-formatted code</li>
    <li>Modifying the existing software: This implies the need for software,
…, and data structures which are easy to expand and which minimize
side effects of changes…</li>
    <li>Revalidating the modified software: This implies the need for
software structures which facilitate selective retest, and aids for
making retest more thorough and efficient.</li>
  </ul>
</blockquote>

<p>We have the tools today to do these things. They are things like
modular design, the SOLID principles, and TDD. We have learned ways
to write well-structured code which minimize side effects of changes
and which facilitate retest. We’ve written languages and libraries
which help us do these things.</p>

<p>But yet maintenance is still a problem.</p>

<p>Perhaps we as an industry are focusing only on the “cool” stuff. Or
believe/hope that “someone else” will maintain it. Or focusing on
immediate customer need and not considering long term needs. The
customer themselves may not consider the long term costs.</p>

<p>As professionals we need to consider the life-span of the code we are
writing, and write it accordingly. If a civil engineer is asked to build
a bridge that need only last for a single crossing it will be quite
different than if the bridge needed to last for decades (or longer).
We need to think in same ways.</p>

<p>Currently we often write software as if it only needs to work for
today. No thought is given to tomorrow.</p>

<p>We have the tools to write software that can live as long as it needs
to. But we need to treat the life-span as a requirement.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>Boehm, B. W. “Software Engineering” <em>Classics in Software
Engineering.</em> Ed. Edward Nash Yourdon. New York: YOURDON
Press, 1979. pp325-361. Print. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is Your Retro Done?]]></title>
    <link href="http://code-and-cocktails.heroku.com/blog/2015/11/05/is-your-retro-done/"/>
    <updated>2015-11-05T16:36:31-05:00</updated>
    <id>http://code-and-cocktails.heroku.com/blog/2015/11/05/is-your-retro-done</id>
    <content type="html"><![CDATA[<p><small>(Cross posted to the <a href="http://www.cyrusinnovation.com/is-your-retro-done/">Cyrus Innovation Blog</a>)</small></p>

<p>Retrospective meetings are an important part of any sort of “Agile”
process. I have a rule about when a retrospective meeting is over.</p>

<ol>
  <li>Everyone that wants to talk has talked.</li>
  <li>There is at least one action item.</li>
  <li>There is at least one volunteer for each action item.</li>
</ol>

<p>A good retrospective meetings can help a team achieve what they need
and want. Often, however, these meetings tend toward directionless
discussion and complaining. While <em>sometimes</em> a ‘complaining’
retrospective can be good and cathartic, these should not be the usual
meeting.</p>

<p>Recently a client’s retrospective meetings had fallen by the wayside.
Even when they had them they were mostly at the complaining end of the
spectrum. We had helped them get back into regular retrospectives,
weekly actually, but they were still not very good.</p>

<p>At the end of one retrospective the team member playing the
facilitator role tried to wrap the long ramble up by asking <em>“Retro
Complete?”</em>. I cut off the murmured agreements with another question:
<em>“Do we have some action items?”</em>.</p>

<p>A retrospective meeting should result in action items. These might be
a new story/ticket/card, a task, a new process, or an experiment to
try. Without these the meeting was just discussion.</p>

<p>Also important is that the action items have volunteers. If no one
wants to do or ‘champion’ an action item then find out why. Perhaps
the action item just isn’t that important to the team; then drop it.
Perhaps it is too big and amorphous; then break it down to a single
next action. Or perhaps it is scary; if this is the case then
this scariness is something for more discussion.</p>

<p>In the end the team discussed what actions to take on the topics they
had discussed and created a short list. They even had volunteer for at
least one. Still not the most successful retrospective, but better
than the last. Hopefully they’ll keep this habit and their retros will
become even more effective.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reminder: Agile Is Risk Management]]></title>
    <link href="http://code-and-cocktails.heroku.com/blog/2015/06/21/agile-is-risk-management/"/>
    <updated>2015-06-21T12:18:20-04:00</updated>
    <id>http://code-and-cocktails.heroku.com/blog/2015/06/21/agile-is-risk-management</id>
    <content type="html"><![CDATA[<p>In a note of the References section of “Waltzing with Bears” (DeMarco
&amp; Lister 2003), there is a note on “Planning Extreme Programming”
(Beck &amp; Fowler 2001) which says “When viewed as a set of
[Risk Management] strategies, XP makes all kinds of sense.” This made
me review how XP (or Agile more generally) is a risk management
technique.</p>

<p>The incremental approach of XP reduces risk of late delivery or wrong
delivery. The demo, planning and retrospective meetings seem to be an
implicit risk analysis/mitigation exercise. It might be beneficial to
make this more explicit.</p>

<p>One place where XP doesn’t line up with DeMarco &amp; Lister’s thoughts on
risk management is their advice that there should be sizable up-front
design and estimation. XP eschews this. XP argues that the cost of
up-front design &amp; estimation of higher than the risk that they
mitigate. It seems a reasonable risk vs. cost choice. Adding some
explicit up-front brainstorming should be sufficient to cover the
problem of missing large-impact risks. Furthermore the iterative
nature of the methodology allows for a just-in-time approach to the
costs and risks.</p>

<p>The book also contains a quote from Tom Glib who said (paraphrased)
‘Be ready to pack up whatever you’ve got any given morning and
deliver it by close of day’. This is very fitting with the idea in XP
that the result of every iteration should be deliverable and producing
value. While a one-day iteration, as implied in the quote, is perhaps
too extreme for many teams; the exercise of determining what it would
take to deliver value in shorter and shorter iterations is valuable.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bootstrapping a Testing Library]]></title>
    <link href="http://code-and-cocktails.heroku.com/blog/2015/04/18/bootstrapping-lisp-testing-library/"/>
    <updated>2015-04-18T14:43:22-04:00</updated>
    <id>http://code-and-cocktails.heroku.com/blog/2015/04/18/bootstrapping-lisp-testing-library</id>
    <content type="html"><![CDATA[<h2 id="abstract">Abstract</h2>

<p>What’s a person to do when one prefers developing in a TDD style and
decides to start a project where nothing not directly in the language
needs to be written? Why, write a testing library of course! But…
without a testing library how can one write this testing library in a
TDD fashion? Herein is how I went about doing it.</p>

<p>(Full disclosure: this is not the first time I’ve tried this sort
thing<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup>. But I had forgotten I had done it before until I was
writing this article.)</p>

<h2 id="why">Why?</h2>

<blockquote>
  <p>“If you wish to make an apple pie from scratch, you must first
invent the universe.” – Carl Sagan</p>
</blockquote>

<p>I have decided to have a crazy project wherein I’ll write an
application in Common Lisp and <em>only</em> Common Lisp. That is to say, no
other libraries. I have allowed myself to use extensions provided by
the the implementation SBCL<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup> so luckily I won’t need to write my
own socket and threading extensions.</p>

<p>This is a crazy and stupid idea. But the point of the project is to
give me a place to play around with things I don’t normally deal with
and in a language that I like to play with.</p>

<h2 id="test-driving-a-testing-library">Test Driving a Testing Library</h2>

<h3 id="where-to-start">Where to start?</h3>

<p>Common Lisp has no built in testing library, but it does have
<code>assert</code><sup id="fnref:3"><a href="#fn:3" class="footnote">3</a></sup>. If you have <code>assert</code> you can write a testing library.
The problem is writing the first test. I puzzled it over a little and
decided I’d need a function which would take an expression to evaluate
(the test) and would return some data structure which would indicate
the results of the test. Given that here is the first test:</p>

<pre><code class="language-lisp">(assert (assoc :failure (test::collect-test-results (assert nil))))
</code></pre>

<p>So this is asserting that the return value of <code>collect-test-results</code>
when applied to <code>(assert nil)</code> will be an alist<sup id="fnref:4"><a href="#fn:4" class="footnote">4</a></sup> which will
have a <code>cons</code> cell whose <code>car</code> is <code>:failure</code>.</p>

<p>This test directly implies the following test:</p>

<pre><code class="language-lisp">(assert (not (assoc :failure (test::collect-test-results (assert t)))))
</code></pre>

<p>That is to say: if the expression does not raise an exception there
will <em>not</em> be such an element in the returned alist.</p>

<p>After implementing a macro which lets those test pass I wrote some
more tests to round out what I thought would be a useful implmentation
of this base function of the library. I now had these tests to
bootstrap my library.</p>

<pre><code class="language-lisp">(assert (assoc :failure (test::collect-test-results (assert nil))))
(assert (not (assoc :failure (test::collect-test-results (assert t)))))
(assert (equal (assoc :value (test::collect-test-results 'foo)) '(:value . foo)))
(assert (assoc :duration (test::collect-test-results 'foo)))
(assert (assoc :start (test::collect-test-results 'foo)))
(assert (assoc :end (test::collect-test-results 'foo)))
(format t "~A...PASSED~&amp;" 'test::collect-test-results)
</code></pre>

<p>With this I felt that I had enough testing to make me feel confident
in my little implementation. It wasn’t perfect - but good enough for
me to now <em>use</em> this function to test other parts of my library.</p>

<h3 id="how-to-write-a-test">How to write a test</h3>

<p>With <code>collect-test-results</code> I had a way to writing and running
individual simple tests. But it wasn’t a very convenient thing to use.
But what it let me do is now write tests for <code>deftest</code> which would let
me define tests. I started by writing the sort of test I wanted to
write:</p>

<pre><code class="language-lisp">(deftest a-simple-failing-test
    "This is a very simple test which fails"
  (assert (= 5 (+ 2 2))))
</code></pre>

<p>Through a few tests, written using <code>collect-test-results</code> I determined
that <code>deftest</code> would intern a symbol with the same name as the first
argument of the <code>deftest</code>, bind its function property to a function
which when called would, by calling <code>collect-test-results</code> evaluate
the body of the <code>deftest</code>. These symbols were put into a list which
could be retrieved from the library. Furthermore, defining a test with
the same name as an existing test does not create a duplicate test.</p>

<p>It might be clearest to just show you how these tests (and an
extracted helper function) ended up:</p>

<pre><code class="language-lisp">(defmacro assert-no-failure (&amp;body assertion)
  (let ((failure (gensym "fail")))
    `(let ((,failure (assoc :failure (test::collect-test-results
                                       (assert ,@assertion)))))
       (assert (not ,failure) () (format nil "~A" ,failure)))))

(deftest a-simple-failing-test
    "This is a very simple test which fails"
  (assert (= 5 (+ 2 2))))

(let ((test-list (test::test-list)))
  (assert-no-failure (equal test-list '(a-simple-failing-test)))
  (assert-no-failure (fboundp (car test-list)))
  (assert-no-failure (assoc :failure (funcall (car test-list))))
  (assert-no-failure (string= "This is a very simple test which fails"
                              (documentation (car test-list) 'function)))
  (assert-no-failure (equal (assoc :test-name (funcall (car test-list)))
                            '(:test-name . test-test::a-simple-failing-test))))

(deftest a-simple-failing-test
    "This is a very simple test which fails"
  (assert (= 5 (+ 2 2))))

(assert-no-failure (= (length (test::test-list)) 1))

(deftest a-simple-passing-test
    "This is a very simple test which passes"
  (assert (= 4 (+ 2 2))))

(assert-no-failure (= (length (test::test-list)) 2))

(format t "~A...PASSED~&amp;" 'test:deftest)
</code></pre>

<h3 id="running-tests">Running tests</h3>

<p>Now that we can define tests and evaluate them all that is left is to
have a convenient way to run the defined tests. Three quick tests on
the output of <code>run-all-tests</code> were proof enough for me (the tests that the
call to <code>run-all-tests</code> would run were the ones defined above, one
passing and one failing) that it would execute each test, report which
ones failed and a count of passes and fails to <code>*standard-output*</code>.:</p>

<pre><code class="language-lisp">(let ((*standard-output* (make-string-output-stream)))
  (run-all-tests)
  (let ((output (get-output-stream-string *standard-output*)))
    (assert-no-failure (search "A-SIMPLE-FAILING-TEST...FAILED." output))
    (assert-no-failure (search "PASSED: 1" output))
    (assert-no-failure (search "FAILED: 1" output))))
(format t "~A...PASSED~&amp;" 'test:run-all-tests)
</code></pre>

<h3 id="recap">Recap</h3>

<p>At this point my testing library has two main entry points: <code>deftest</code>
and <code>run-all-tests</code>. To create them, I first used <code>assert</code> to test
drive the creation on a lower-level function <code>collect-test-results</code>,
which I then used to test drive <code>deftest</code>, which I then used to test
drive <code>run-all-tests</code>.</p>

<h2 id="next-steps-and-thoughts">Next Steps and Thoughts</h2>

<p>Now that I have this testing library I can use it to test drive the
rest of the application I will write. I’m sure along the way I’ll be
extending this library as I find new requirements for it. I’ll
probably also be writing some assertion library to make the tests more
expressive.</p>

<p>The resulting tests<sup id="fnref:5"><a href="#fn:5" class="footnote">5</a></sup> and code<sup id="fnref:6"><a href="#fn:6" class="footnote">6</a></sup> are in my GitHub repository for this
project: yakshave<sup id="fnref:7"><a href="#fn:7" class="footnote">7</a></sup>.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p><a href="http://code-and-cocktails.herokuapp.com/blog/2011/04/11/writing-a-unit-test-framework-in-a-language-y/">http://code-and-cocktails.herokuapp.com/blog/2011/04/11/writing-a-unit-test-framework-in-a-language-y/</a> <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p><a href="http://www.sbcl.org/">http://www.sbcl.org/</a> <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p><a href="http://www.lispworks.com/documentation/HyperSpec/Body/m_assert.htm#assert">http://www.lispworks.com/documentation/HyperSpec/Body/m_assert.htm#assert</a> <a href="#fnref:3" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p><a href="http://www.lispworks.com/documentation/HyperSpec/Body/26_glo_a.htm#association_list">(or association list) “<em>n. a list of conses representing an association of keys with values, where the car of each cons is the key and the cdr is the value associated with that key.</em>”</a> <a href="#fnref:4" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:5">
      <p><a href="https://github.com/verdammelt/yakshave/blob/53348569c40aed951fbeb90ff78d423e25a39db7/test-test.lisp">https://github.com/verdammelt/yakshave/blob/53348569c40aed951fbeb90ff78d423e25a39db7/test-test.lisp</a> <a href="#fnref:5" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:6">
      <p><a href="https://github.com/verdammelt/yakshave/blob/53348569c40aed951fbeb90ff78d423e25a39db7/test.lisp">https://github.com/verdammelt/yakshave/blob/53348569c40aed951fbeb90ff78d423e25a39db7/test.lisp</a> <a href="#fnref:6" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:7">
      <p><a href="https://github.com/verdammelt/yakshave">https://github.com/verdammelt/yakshave</a> <a href="#fnref:7" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Project 'Reloaded' Pattern Gotcha]]></title>
    <link href="http://code-and-cocktails.heroku.com/blog/2015/03/19/clojure-project-reloaded-pattern-gotcha/"/>
    <updated>2015-03-19T11:04:01-04:00</updated>
    <id>http://code-and-cocktails.heroku.com/blog/2015/03/19/clojure-project-reloaded-pattern-gotcha</id>
    <content type="html"><![CDATA[<h2 id="abstract">Abstract</h2>

<p>Ensure that <code>user.clj</code> does not contain dependencies (even transitive)
upon code that needs to be compiled. This file is loaded well before
Leiningen is started enough to compile files.</p>

<h2 id="problem-description">Problem Description</h2>

<p>In my latest learning project with Clojure I decided to try Stuart
Sierra’s Reloaded project pattern<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup>. I liked the idea of this
project pattern because it promised to make the REPL driven
development on a web application smoother. Things were going smoothly
as I worked on simple dummy pages for my little application. However
when I connected the data file parsing code with its custom exception
to the application I started getting compilation and class not found
errors related to the custom exception. The reason for this is a
rather simple one - but was difficult for me to find information on or
figure out.</p>

<p>First an aside about custom exceptions. It seems that in the Clojure
community that custom exceptions are avoided<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup>. Either one of the
built-in Java exceptions, <code>ex-info</code><sup id="fnref:3"><a href="#fn:3" class="footnote">3</a></sup> or Slingshot<sup id="fnref:4"><a href="#fn:4" class="footnote">4</a></sup> is used
instead. However it had been my favored approach to create a
domain-specific exception for my application’s needed, so I stumbled
forward and learned how to do it. It was relatively simple by using
the <code>:gen-class</code> option of <code>ns</code> and the <code>:aot</code> feature of Leiningen.
And it worked well… until I connected the code using the exception
with the web application that was implemented in the reloaded pattern.</p>

<p>A big part of the reloaded pattern is the use of functions in
<code>user.clj</code> to start and stop the system. This file is loaded by
Clojure whenever it is started<sup id="fnref:5"><a href="#fn:5" class="footnote">5</a></sup> so it is perfect for functionality
wanted in a REPL. This file is kept in a directory which is only
included in the class path when the <code>dev</code> profile is used (the <code>repl</code>
and <code>compile</code> tasks use the <code>dev</code> profile by default).</p>

<p>Everything is fine until the code in <code>user.clj</code> depends upon (even
transitively) code which must be compiled (such as custom exceptions).
Then we hit a annoying chicken-and-egg problem<sup id="fnref:6"><a href="#fn:6" class="footnote">6</a></sup> wherein Leiningen
when trying to compile (or launch the REPL) naturally starts Clojure,
which in turn loads <code>user.clj</code> which in turn depends upon code that
needs to be compiled. The error that is reported says that the
compiled class cannot be found.</p>

<h2 id="the-confusion">The Confusion</h2>

<p>This error led me to first think that my custom exception was not
written properly and thus wasn’t being compiled, then I thought it was
a problem of the <code>:aot</code> feature in Leiningen and interaction with the
<code>dev</code> profile. But the problem was more fundamental. It was just my
sort of luck that kept me from finding the answer until I spent hours
debugging and researching. Now it is easy to find several reports of
this problem<sup id="fnref:7"><a href="#fn:7" class="footnote">7</a></sup>. It is not a Leiningen problem, not a Clojure
problem, not a reloaded pattern problem, but an annoyingly unfortunate
interaction between them.</p>

<h2 id="the-workaround">The Workaround</h2>

<p>Luckily, once the problem was identified, there is a relatively easy
workaround. I took the parts of <code>user.clj</code> which depended upon the
custom exception and moved those to a new file <code>reloaded.clj</code> which is
then loaded when the REPL starts by using the <code>:repl-options</code>
configuration in <code>project.clj</code>. <code>:repl-options</code> as a <code>:init</code>
configuration which can contain an expression which is evaluated when
the REPL is starting. I set it to <code>(load "reloaded")</code>.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>http://thinkrelevance.com/blog/2013/06/04/clojure-workflow-reloaded <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>http://tinyurl.com/o5kn5av <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>https://clojuredocs.org/clojure.core/ex-info <a href="#fnref:3" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p>https://github.com/scgilardi/slingshot/blob/master/README.md <a href="#fnref:4" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:5">
      <p>http://dev.solita.fi/2014/03/18/pimp-my-repl.html <a href="#fnref:5" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:6">
      <p>https://en.wikipedia.org/wiki/Chicken_or_the_egg <a href="#fnref:6" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:7">
      <p>https://github.com/technomancy/leiningen/issues/1245,
  https://github.com/technomancy/leiningen/issues/1477,
  https://github.com/technomancy/leiningen/issues/1764,
  https://github.com/technomancy/leiningen/issues/1787 <a href="#fnref:7" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mocking Class Constructor in Python With Mockito]]></title>
    <link href="http://code-and-cocktails.heroku.com/blog/2015/01/18/mocking-class-constructor-in-python-with-mockito/"/>
    <updated>2015-01-18T20:08:59-05:00</updated>
    <id>http://code-and-cocktails.heroku.com/blog/2015/01/18/mocking-class-constructor-in-python-with-mockito</id>
    <content type="html"><![CDATA[<p>In the current code I’m working on we once and a while want to mock
the constructor of a class. It is only really needed because we have a
few classes who sadly do heavy-lifting in their constructors.</p>

<p>The common wisdom on the team was “you can’t do that”, but it bugged
me and I eventually googled the right things and found out how to do
it. The moment I did it myself I realized that it was obvious. Let me
explain.</p>

<p>In [Python Mockito][https://code.google.com/p/mockito-python/] the
standard form of stubbing is done with the <code>when</code> function, operating
upon an object:</p>

<pre><code class="language-python">when(obj).method(arg1, arg2).thenReturn(5)
</code></pre>

<p>This states that <code>when</code> <code>obj.method</code> is called with arguments <code>arg1</code>
and <code>arg2</code> then return <code>5</code>. (There are other things to do besides
<code>thenReturn</code> but for purposes of this discussion that is enough).</p>

<p>What about if you want to mock a constructor? The naïve approach is to
try:</p>

<pre><code class="language-python">when(Klass).__init__(arg1, arg2).thenReturn(fakeKlassInstance)
</code></pre>

<p>But that doesn’t work. It will return an error equivalent to “NoneType
does not have an attribute thenReturn”.</p>

<p>Making it work is pretty simple. Let’s say that <code>Klass</code> is defined in
a module called <code>klass</code>. Then we can do the following:</p>

<pre><code class="language-python">import klass
when(klass).Klass(arg1, arg2).thenReturn(fakeKlassInstance)
</code></pre>

<p>It works because a module is an object on which the classes are
methods! It was so obvious when I saw it work. The clues were right in
from of my face, calling the constructor of a class is as simple as
using the class name <em>as if</em> it were a function. That’s because <em>it
is</em>! I’d like to blame too many years of Java &amp; C# where “importing”
is more about telling the linker where to find things than about
creating objects that can be manipulated.</p>

<p>So to sum up: a class is a method on a module which returns an
instance of that class. When you import a module you are creating a
variable of that name bound to an object which represents that module.</p>

<hr />

<p>Here is a test file which can be used to play with this idea. Note it
uses the fact that the name of the current modules is bound to a
variable called <code>__name__</code> and that <code>sys.modules</code> is a hash of all
modules.</p>

<pre><code class="language-python">import sys
import mockito

class Foo(object):
    def __init__(self):
        self.x = 5

    def method(self):
        return 10


f = Foo()
print f.method()
mockito.when(f).method().thenReturn('blah')
print f.method()

# This will not work and throw an error.
# print Foo()
# mockito.when(Foo).__init__(mockito.any()).thenReturn('blah')
# print Foo()

print Foo()
mockito.when(sys.modules[__name__]).Foo().thenReturn('blah')
print Foo()
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Cocktail Pattern Language]]></title>
    <link href="http://code-and-cocktails.heroku.com/blog/2014/11/01/cocktail-pattern-language/"/>
    <updated>2014-11-01T15:20:08-04:00</updated>
    <id>http://code-and-cocktails.heroku.com/blog/2014/11/01/cocktail-pattern-language</id>
    <content type="html"><![CDATA[<h2 id="abstract">Abstract</h2>

<p>The idea of a “Pattern Language” is well known and well received in
the Software community. Since the work of the Gang of Four<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup> it has
helped in the communication of solutions and the discovery of new ones
Cocktails have a pattern language which is well recognized by
professionals but not by consumers. In this post I hope to make the
Cocktail Pattern Language visible and useful to cocktail consumers and
amateur bartenders.</p>

<h2 id="what-is-a-cocktail">What is a cocktail?</h2>

<p>To begin with a “cocktail” is defined, classically, as the mixture of
a “spirit”, sugar, water, bitters. This itself is less of a recipe for
a specific drink as it is a pattern for all possible cocktails. While
the modern concept of a cocktail has expanded from this origin it is
still a good starting place for this discussion, and a fundamental
example of cocktail patterns.</p>

<h2 id="what-is-a-pattern">What is a pattern?</h2>

<blockquote>
  <p>The elements of this language are entities called patterns. Each
pattern describes a problem that occurs over and over again in our
environment, and then describes the core of the solution to that
problem, in such a way that you can use this solution a million
times over, without ever doing it the same way twice.
– Christopher Alexander<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup></p>
</blockquote>

<p>Basically by “pattern” I mean a name for a particular way of doing
something, a solution to a problem. A pattern does not dictate the
only way to do something but shows the “shape” of the solution. The
specifics of the situation will always cause variations.</p>

<h3 id="examples-of-patterns">Examples of Patterns</h3>

<p>The easiest way to describe what cocktail patterns are is to give
examples.</p>

<h4 id="the-manhattan">The Manhattan:</h4>

<p>The recipe for a Manhattan is 2 parts Rye (or Bourbon), 1 part Sweet
Vermouth and Angostura bitters. The recipe contains a main spirit:
Rye, bitters: Angostura, and sweet: Vermouth (which also adds more
kick and bit more bitter).</p>

<p>The simplest variant is The Rob Roy, replace the Rye with Scotch. Next
simplest are the Dry and Perfect variants: Dry instead of Sweet
Vermouth, or equal parts of two respectively.</p>

<p>A more differing variant is The Toronto: 2 oz. Rye, .25 oz Fernet
Branca, .25 tsp sugar, Angostura bitters. While on the surface it
doesn’t sounds like the same drink it is if you break it down. The
main spirit is still Rye. The bitter &amp; extra kick is added by the
Fernet and Angostura while the sweet is provided directly by sugar.</p>

<p>Thus the <em>pattern</em> of a Manhattan is a whiskey paired with bitters and
sweet.</p>

<h4 id="the-martini">The Martini</h4>

<p>One cocktail which is (in)famous for its variants is the Martini. The
<em>pattern</em> of a Martini is simply Gin (or Vodka) and Vermouth.
Martinis can be Sweet, Perfect or Dry. The amount of vermouth can
vary depending on the taste of the drinker. Different garnishes can be
used, additional ingredients can be added as desired.</p>

<p>One variant is The Bronx. It is a Perfect Gin Martini with the
addition of Orange Juice: 6 parts Gin, 3 parts Sweet Vermouth, 2 part
Dry Vermouth and 3 parts Orange Juice.</p>

<p>Another variant is The Vesper Martini which is essentially a Dry Gin
Martini: 3 oz. Gin, 1 oz Vodka, .5 oz Lillet Blanc<sup id="fnref:3"><a href="#fn:3" class="footnote">3</a></sup>. It replaces
the Vermouth with Lillet (similar to Vermouth in that it is a
fortified wine with herbal ingredients).</p>

<p>One last variant is The Martinez which is basically a Sweet Martini: 2
oz Gin, .75 oz Sweet Vermouth, .25 oz Maraschino Liqueur and Angostura
bitters. Here the Sweet Vermouth is augmented with Maraschino and a
bit of bitters is added.</p>

<h4 id="the-sour">The Sour</h4>

<p>A final pattern I’ll mention is the sour. Drinks in this pattern are
The Whiskey sour, the Gimlet, the Daiquiri. The pattern here is a
spirit along with a good amount of citrus juice (Lime often) and some
sugar.</p>

<h2 id="why-it-is-useful">Why it is useful</h2>

<blockquote>
  <p>The usefulness of speaking of patterns is to have a common
terminology for discussing the situations designers already see
over and over.<sup id="fnref:4"><a href="#fn:4" class="footnote">4</a></sup></p>
</blockquote>

<p>Patterns in cocktails can be very useful to the bartender because it
helps them choose the next drink for the patron. The patron may, as I
do, say “I like Manhattans” or “I’d like something like a Daiquiri”
and the bartender can rattle off a series of variants upon that
pattern, or even invent their own.</p>

<p>Also the patterns overlap. For instance a Manhattan and a Sweet
Martini have the same basic pattern: 2 spirit to 1 Sweet Vermouth. So
a person who likes Manhattans may slide into Sweet Martinis and thus
explore a whole new pattern of cocktails.</p>

<p>Thus the patterns of cocktails, as in Architecture and Programming,
allow one to have a language to talk about the problem and possible
solutions to it and to find new areas of discovery.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>Gamma, Helm, Johnson, and Vlissides. <em>Design Patterns.</em> Reading,
  MA: Addison-Wesley, 1995. Print. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>Alexander, Christopher. <em>Pattern Language.</em> New York: Oxford UP,</p>
      <ol>
        <li>Print.</li>
      </ol>
      <p><a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>Due to recipe changes the current Lillet Blanc is sweeter and
  less bitter than previous versions. A better ingredient would be
  Cocchi Americano. <a href="#fnref:3" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p>“Cocktail.” Wikipedia. Wikimedia Foundation, 29 Oct. 2014. Web.
  01 Nov. 2014. <a href="http://en.wikipedia.org/wiki/Cocktail">http://en.wikipedia.org/wiki/Cocktail</a>. <a href="#fnref:4" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[To Estimating Bugs or Not: The Definitive Answer]]></title>
    <link href="http://code-and-cocktails.heroku.com/blog/2014/08/03/estimating-bugs/"/>
    <updated>2014-08-03T16:31:11-04:00</updated>
    <id>http://code-and-cocktails.heroku.com/blog/2014/08/03/estimating-bugs</id>
    <content type="html"><![CDATA[<p>I was recently re-reading the XP books and in <em>Extreme Programming
Installed</em><sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup> I came upon a section where the authors say that bugs
should be estimated and planned into iterations like other stories.
I disagreed with that idea, thinking about how ‘<em>opinion had changed</em>’
on that topic since the book was written and that ‘<em>that’s not how I
was taught to do it</em>’.</p>

<p>Then I wondered <em>why</em> I thought that, just who had taught me that bugs
should not be estimated. At first I assumed it was Jim Shore from <em>The
Art of Agile</em><sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup>, but a quick look in the book<sup id="fnref:3"><a href="#fn:3" class="footnote">3</a></sup> shows that he says
<em>to</em> estimate bug stories. That led me to do some looking around the
Internet<sup id="fnref:4"><a href="#fn:4" class="footnote">4</a></sup> and discuss this issue with my colleagues at Cyrus
Innovation<sup id="fnref:5"><a href="#fn:5" class="footnote">5</a></sup>.</p>

<p>I know believe I have the definitive answer to the question of whether
or not to estimate bugs.</p>

<p>(First a clarification: I am not talking about defects found during an
iteration in, or caused by, stories being worked on during that
iteration. That just means that story is not done. Don’t take credit
for it and create a bug card. Just accept that the story is not done.)</p>

<p>And now for that definitive answer:</p>

<blockquote>
  <p><em>It depends.</em></p>
</blockquote>

<p>Some teams might find it useful to give the Customer the ability to
prioritize bugs along with other work. By estimating the bugs the
Customer has all the data they need to make their trade-offs. That
being said: estimating bugs can be very difficult since there is often
more than the usual share of unknown unknowns; thus the estimate will
be less reliable than normal.</p>

<p>Some teams might find it useful to estimate bugs so that planning an
iteration is easier. If a team knows it can do 14 points of work, then
14 points of work can be taken off the top of the backlog, maybe they
are all bugs, or some bugs or no bugs; doesn’t matter - it is 14
points. If bugs are not estimated then maybe the team can do some bugs
and how many more points? <em>shrug</em>.</p>

<p>Some teams might find that estimating bugs allows the number of bugs
to be hidden among the work being done. They want to make sure that
bugs are always visible, so they do <em>not</em> estimate want to make sure
that bugs always detract from their velocity. Estimating bugs makes
them a bit more <em>normal</em> and thus less visible.</p>

<p>So ultimately, as with any such question, the answer depends upon the
needs and desires of the team. Do what works for you, and periodically
question why and even try a different way.</p>

<p>(Drink Pairing: I paired the writing of this post with a simple
Daiquiri<sup id="fnref:6"><a href="#fn:6" class="footnote">6</a></sup>.)</p>

<hr />
<p>and strain.</p>
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>http://www.amazon.com/Extreme-Programming-Installed-Ron-Jeffries/dp/0201708426/ <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>http://www.jamesshore.com/Agile-Book/ <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>My copy contains the note: “To Mark - Here’s to sucking less! Jim Shore” <a href="#fnref:3" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p>Specifically the World Wide Web section of the Internet. <a href="#fnref:4" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:5">
      <p>http://www.cyrusinnovation.com/ <a href="#fnref:5" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:6">
      <p>1.5oz Rum, .75oz Lime Juice, .25oz Simple Syrup. Shake over ice <a href="#fnref:6" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I Have (Re)-learned From SICP]]></title>
    <link href="http://code-and-cocktails.heroku.com/blog/2014/07/06/what-i-have-re-learned-from-sicp/"/>
    <updated>2014-07-06T14:14:33-04:00</updated>
    <id>http://code-and-cocktails.heroku.com/blog/2014/07/06/what-i-have-re-learned-from-sicp</id>
    <content type="html"><![CDATA[<p>After about two years of slowly working through Structure and
Interpretation of Computer Programs (SICP)<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup> I finally completed it.
I didn’t do every exercise but I did many of them<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup>.</p>

<h2 id="the-history">The History</h2>

<p>I first worked through SICP back in 1989 as part of my class at
Worcester Polytechnic Institute (where I received my BSCS in 1992). It
is a book that I remember with awe. I remember being, along with most
of the class, mystified by this <em>dumb</em> language Scheme. It was so
unlike anything we were used to. I was familiar with BASIC and Pascal
and some very basic Bourne Shell scripting. Scheme was <em>alien</em>. Most
of us thought it crazy. But then, somewhere about half-way through the
class it clicked, suddenly I <em>got it</em>. Scheme, and Lisp by
association, was amazing. The REPL development, the flexibility, the
lack and regularity of syntax gave it great power. And then… then…
we started on the chapter about the Meta-circular Evaluator<sup id="fnref:3"><a href="#fn:3" class="footnote">3</a></sup>;
writing an evaluator of Scheme in Scheme. It was so simple, so
clear<sup id="fnref:4"><a href="#fn:4" class="footnote">4</a></sup>.</p>

<p>This was a Freshman class, and the rest of my time at WPI I played
around with Lisp, sometimes doing assignments in it, playing with my
Emacs initialization files, that sort of thing. Never got serious. And
then I joined the work force in 1990 with a summer job doing C/Motif
work at a startup. And then after college a C job connecting their
Windows app to a particular printer for graphs, and then a C/Motif job
on a news ticker for a stock market application. Oh and then I
learned<sup id="fnref:5"><a href="#fn:5" class="footnote">5</a></sup> object-oriented programming with C++… I forgot the
lessons I learned in SICP.</p>

<h2 id="the-return">The Return</h2>

<p>I went back to SICP expecting to be <em>reminded</em> of a few things. What I
found was that I was <em>taught</em> things I never remember being taught.
Things which I so wish I had grokked at the time. Things which I
obviously never understood and then forgot.</p>

<p>A few of the things I learned way back when and then forgot were:</p>

<ul>
  <li>Judge a programming language by the means of abstraction and the
means of composition.</li>
  <li>The power/utility of REPL development.</li>
  <li>Lazy streams to deal with infinities are not scary.</li>
  <li>Functional Programming.</li>
  <li>Object-Oriented Programming.</li>
  <li>The Problem of State.</li>
</ul>

<h2 id="the-reaction">The Reaction</h2>

<p>This is a <em>Freshman</em> level textbook, and all of this was taught as
early as the mid-eighties. Looking back I feel like I was caught up in
a great forgetting. There are things we (as Software Engineers<sup id="fnref:6"><a href="#fn:6" class="footnote">6</a></sup>)
<em>knew</em> and then forgot, or chose to forget/overlook.</p>

<p>Now I see people going back to old papers/books and
re-learning/discovering what we already knew but forgot/ignored. It is
like a wider version of Greenspun’s tenth rule<sup id="fnref:7"><a href="#fn:7" class="footnote">7</a></sup>. We had something
and then had to put it aside because it didn’t work in our
“<em>reality</em>”, but now we come back and “<em>discover</em>” it all over again.</p>

<p><strong>OMG</strong> Garbage Collection<sup id="fnref:8"><a href="#fn:8" class="footnote">8</a></sup> <strong>OMG</strong> <em>interactive</em> language shells
(aka REPL) <strong>OMG</strong> dynamic languages <strong>OMG</strong> functional programming
<strong>OMG</strong> <em>OO</em> is about message passing.</p>

<p>What happened, were we asleep?</p>

<p>It would be one thing if we acted like these are in fact old ideas
that are just now realizing are good/possible - but we act like they
are <em>new</em>. Reality has caught up to where the 1960’s thought was
possible<sup id="fnref:9"><a href="#fn:9" class="footnote">9</a></sup>.</p>

<h2 id="the-back-to-the-future">The Back to the Future</h2>

<p>One last thing I (re)learned: The fun of learning and working through
problems. And that leads to what is yet to come.</p>

<p>I’m going to start looking at the old texts of our practice. The
ancients knew things that we have forgotten. I will see what I can
learn from them. I will strive to avoid Argument from Antiquity
however, that is always a danger with this sort of thing.</p>

<p>I can only see so far because I stand upon the shoulders of Giants<sup id="fnref:10"><a href="#fn:10" class="footnote">10</a></sup>.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>http://mitpress.mit.edu/sicp/ <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>https://github.com/verdammelt/sicp <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-26.html#%_sec_4.1 <a href="#fnref:3" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p>It was in this class I created the joke idea of ‘God code’. The
  stereotypical 3 line Lisp code, first line defines function,
  second like is a null check, third line recurses. And <em>shit</em> got
  done. <a href="#fnref:4" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:5">
      <p><em>“</em>learned<em>”</em> <a href="#fnref:5" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:6">
      <p>Software Engineer, Programmer, Coder, Hacker whatever you want
  to call us/ourselves. <a href="#fnref:6" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:7">
      <p>“Any sufficiently complicated C or FORTRAN program contains an
  ad hoc, informally-specified, bug-ridden, slow implementation of
  half of Common Lisp.” <a href="#fnref:7" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:8">
      <p>http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-33.html#%_sec_5.3 <a href="#fnref:8" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:9">
      <p>http://www-formal.stanford.edu/jmc/recursive.pdf <a href="#fnref:9" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:10">
      <p>with apologies to Newton. <a href="#fnref:10" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughts About the Domain Model]]></title>
    <link href="http://code-and-cocktails.heroku.com/blog/2014/04/29/thoughts-about-the-domain-model/"/>
    <updated>2014-04-29T20:39:27-04:00</updated>
    <id>http://code-and-cocktails.heroku.com/blog/2014/04/29/thoughts-about-the-domain-model</id>
    <content type="html"><![CDATA[<p>The
<a href="http://c2.com/ppr/checks.html">CHECKS Pattern Language paper</a>(Cunningham
1994) has some good ideas about what they call “Information
Integrity”, ensuring that inputs are parsed/validated/handled well.
But I also found that it made some good statements about the domain
model in general. I’m going to write about a few of these quotes here.</p>

<blockquote>
  <p>Your domain model must express the “logic” of the business in its
richest and often illogical detail. Every clause of every
statement should be motivated by some business fact of life.</p>
</blockquote>

<p>A program will always have an unfortunate amount of code in it, but an
important chunk of it is the domain model. That part that <em>is</em> the
reason for the application. Not the code that does the jQuery
<a href="http://en.wiktionary.org/wiki/jiggery-pokery">jiggery-pokery</a>, not
the <code>malloc</code>s and <code>free</code>s. When the business rules change this is
where the change will be made. Keep it clean and uncluttered with
non-domain details. If there are details in it which do not correspond
to the domain logic then there will be confusion when talking about
the domain with the experts. If the code doesn’t express the domain
the way the domain experts talk about it, or it is incomplete, then
there will be confusion again.</p>

<blockquote>
  <p>In your domain models you are chartered to express business logic
with no more complexity than originally conceived or currently
expressed.</p>
</blockquote>

<p>Domain logic can be complicated to begin with. It doesn’t help that
you are not an expert in the domain of (<em>e.g</em>)
<a href="http://holysmokesbatman.com/tracks/holy-priceless-collection-of-etruscan-snoods.html">Etruscan Snoods</a>,
but you need to write a program to work with them. You talk with the
experts and translate their expertise into a program. Don’t make it
more complicated than it already is. Keep it simple and to the point
so it is easy to talk about it with the domain experts. If it is not
easy to discuss what it does with the domain experts then adding new
features or finding/fixing problems with it will be more difficult.</p>

<blockquote>
  <p>A person reaches through a program’s interface to manipulate the
domain model.</p>
</blockquote>

<p>This is an important thought - the user thinks and talks about the
domain with a certain language, pattern and style; make sure your
program talks their language. If the program’s interface doesn’t match
the user’s language then the user will have trouble using it, or using
it correctly. Data should be labeled with the right words, operations
with the correct terms, and permissible inputs and output formats must
match expected conventions.</p>

<p>In closing the <a href="http://c2.com/ppr/checks.html">paper</a> discusses good
patterns for dealing with inputs and the domain model, but I think
that it is the above quotes really that really stand out as good
things to think about.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serving Coffee With Express]]></title>
    <link href="http://code-and-cocktails.heroku.com/blog/2014/04/13/serving-coffee-with-express/"/>
    <updated>2014-04-13T19:45:58-04:00</updated>
    <id>http://code-and-cocktails.heroku.com/blog/2014/04/13/serving-coffee-with-express</id>
    <content type="html"><![CDATA[<p>A few weeks ago I was playing around with a new stack:
Node-Express-Angular all in CoffeeScript<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup>. I found it quite easy to
have the Express server compile my CoffeeScript files and then return
the JavaScript to the browser. I then found myself last week in a
position at work where I wanted a little test page to hang the Angular
directives I was working on so I quickly used the same trick.</p>

<p>I’m not saying this trick is bullet-proof, or even a necessarily good
idea for production. But it seems like a good thing for testing and
perhaps for getting a project off the ground with some prototyping. It
also serves as a small example of how to write an Express
Middleware<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup>.</p>

<p>With that caveat I will present you with the code and explanation of
it<sup id="fnref:3"><a href="#fn:3" class="footnote">3</a></sup>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="nv">express = </span><span class="nx">require</span> <span class="s">&#39;express&#39;</span>
</span><span class="line"><span class="nv">coffee = </span><span class="nx">require</span> <span class="s">&#39;coffee-script&#39;</span>
</span><span class="line"><span class="nv">fs = </span><span class="nx">require</span> <span class="s">&#39;fs&#39;</span>
</span><span class="line">
</span><span class="line"><span class="nv">app = </span><span class="nx">express</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="nx">app</span><span class="p">.</span><span class="nx">configure</span> <span class="nf">-&gt;</span>
</span><span class="line">  <span class="nx">app</span><span class="p">.</span><span class="nx">set</span> <span class="s">&#39;port&#39;</span><span class="p">,</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">?</span> <span class="mi">3000</span>
</span><span class="line">
</span><span class="line"><span class="nx">app</span><span class="p">.</span><span class="nx">use</span> <span class="nx">express</span><span class="p">.</span><span class="nx">logger</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="nx">app</span><span class="p">.</span><span class="nx">use</span> <span class="s">&#39;/client&#39;</span><span class="p">,</span> <span class="nf">(request, response, next) -&gt;</span>
</span><span class="line">  <span class="nv">coffeeFile = </span><span class="nx">path</span><span class="p">.</span><span class="nx">join</span> <span class="nx">__dirname</span><span class="p">,</span> <span class="s">&quot;../client&quot;</span><span class="p">,</span> <span class="nx">request</span><span class="p">.</span><span class="nx">path</span>
</span><span class="line">  <span class="nv">file = </span><span class="nx">fs</span><span class="p">.</span><span class="nx">read</span> <span class="nx">coffeeFile</span><span class="p">,</span> <span class="s">&quot;utf-8&quot;</span><span class="p">,</span> <span class="nf">(err, data) -&gt;</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">next</span><span class="p">()</span> <span class="k">if</span> <span class="nx">err</span><span class="o">?</span>
</span><span class="line">    <span class="nx">response</span>
</span><span class="line">      <span class="p">.</span><span class="nx">contentType</span><span class="p">(</span><span class="s">&#39;text/javascript&#39;</span><span class="p">)</span>
</span><span class="line">      <span class="p">.</span><span class="nx">send</span> <span class="nx">coffee</span><span class="p">.</span><span class="nx">compile</span> <span class="nx">data</span>
</span><span class="line">
</span><span class="line"><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span> <span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;port&#39;</span><span class="p">),</span> <span class="nf">-&gt;</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&#39;listening on port %d&#39;</span><span class="p">,</span> <span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;port&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The part that concerns us are lines 12-18. This section is telling
Express that if a request comes in with a path starting with <code>/client</code>
that we will want to do some special processing on it.</p>

<ul>
  <li>
    <p>Line 13 determines the path to the CoffeeScript file (which is in
the <code>../client</code> directory relative to our current directory).  Of note
here is that <code>request.path</code> does not contain the <code>/client</code> part of the
path and <code>__dirname</code> is the directory of the currently executing file.</p>
  </li>
  <li>
    <p>Line 14 sets up the reading of this CoffeeScript file. It is
important to specify the encoding otherwise the Coffeescript compile
will throw an error.</p>
  </li>
  <li>
    <p>If there is an error reading the file (line 15), such as the file not
existing, then we tell express to run whatever is the next rule
(eventually if no other rules work Express will send a <code>404</code> for
us).</p>
  </li>
  <li>
    <p>If we can read the file then we use CoffeeScript to compile that file
(line 18) and send that data back as the response (lines 16-18). (Of
note here is that we set the content type to be <code>text/javascript</code>
(line 17) to make sure that the browser does the right thing (it
doesn’t appear necessary with Chrome at least, but probably best to do
it.)).</p>
  </li>
</ul>

<p>Congratulations, we’ve just written an Express Middleware!</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>It is my current opinion that CoffeeScript is better than
  writing directly in JavaScript. It saves the developer from
  making some very basic stupid mistakes with JavaScript and also
  removes some of the syntatic noise. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p><a href="http://expressjs.com/4x/api.html#middleware"></a> <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>The toy app bootstrapping kit I mentioned at the top of this
  post is in my
  <a href="https://github.com/verdammelt/expressular-kit">expressular-kit</a>.
  The code here is not a direct copy of the code there in
  <code>app/server/app.coffee</code>. <a href="#fnref:3" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Only One Way of Doing Things...]]></title>
    <link href="http://code-and-cocktails.heroku.com/blog/2014/01/20/one-way-to-do-things/"/>
    <updated>2014-01-20T19:42:43-05:00</updated>
    <id>http://code-and-cocktails.heroku.com/blog/2014/01/20/one-way-to-do-things</id>
    <content type="html"><![CDATA[<blockquote><p>When there is only one way of doing things, it is easier to<br />	 modify and reuse code. When code is reused, programs are easier<br />	 to change and most importantly, shrink. When a program shrinks<br />	 its construction and maintenance requires fewer people which<br />	 allows for more opportunities for reuse to be found. Consistency<br />	 leads to reuse, reuse leads to conciseness, conciseness leads to<br />	 understanding.</p><footer><strong>Programming as Experience: The Inspiration of Self (1995)</strong></footer></blockquote>

<h2 id="resuse">Resuse</h2>

<p>I like the meaning of ‘reuse’ in this quote. This is not the ‘reuse’
promised by early OO proponents. They promised<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup>: that one would be
able to create objects which would be reused from one project to
another. This is the reuse which means that code is reused <em>in</em> a
project. This is the reuse which I believe to be attainable.</p>

<p>It is like a inward-spiral: the more reuse of code the fewer ways to
do a thing there will be which leads to only one way.</p>

<p>The sentence about fewer people is a bit odd - but I feel it is does
make sense. The fewer people on the team the more likey there will be
only one way to do things which means there is by definition more
reuse.</p>

<h2 id="consistency">Consistency</h2>

<p>Perhaps more important than reuse though is consistency. If code is
consistent I have found it to be easier to reason about, because
reasonable assumptions can be made when reading it. Being able to make
reasonable assumptions, and have those borne out, is very important to
me when reading code.</p>

<h2 id="conciseness-and-understanding">Conciseness and Understanding</h2>

<p>And it follows that with reuse and consistency one will get
consiceness. But does that necessarily lead to underderstanding? That
is something I <em>feel</em> is right, but I have seen some concise code
which is hard to understand.</p>

<hr />
<p><em>References:</em></p>

<ul>
  <li>“Programming as Experience: The Inspiration of Self”, 1995, Smith,
Randall B and Ungar, David</li>
</ul>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>Or perhaps that is not what they said, but what we heard. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD in Common Lisp: Recursive Yak-shaving]]></title>
    <link href="http://code-and-cocktails.heroku.com/blog/2013/12/25/tdd-in-common-lisp-recursive-yak-shaving/"/>
    <updated>2013-12-25T17:34:59-05:00</updated>
    <id>http://code-and-cocktails.heroku.com/blog/2013/12/25/tdd-in-common-lisp-recursive-yak-shaving</id>
    <content type="html"><![CDATA[<p>While avoiding family this Christmas-day I started trying to figure out way
for me to do TDD in Common Lisp (as one does…). That led to SLIME<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup> and
    QuickLisp<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup> and lisp-unit<sup id="fnref:3"><a href="#fn:3" class="footnote">3</a></sup> and asdf<sup id="fnref:4"><a href="#fn:4" class="footnote">4</a></sup> (<em>&amp;c. &amp;c</em>).</p>

<h2 id="its-yaks-the-whole-way-down">…it’s yaks the whole way down.</h2>

<p>The hardest part for me was to find a simple way to load my code and run the
tests. ASDF ships with <code>asdf:test-system</code> defined but it does nothing by
default<sup id="fnref:5"><a href="#fn:5" class="footnote">5</a></sup>. So I did some digging around and saw some other’s solutions and
synthesized my version.</p>

<p>Here is an example ASDF system definition for a Game of Life<sup id="fnref:6"><a href="#fn:6" class="footnote">6</a></sup>
implementation.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="common-lisp"><span class="line"><span class="p">(</span><span class="nv">asdf:defsystem</span> <span class="ss">#:gol</span>
</span><span class="line">  <span class="ss">:description</span> <span class="s">&quot;Conways Game of Life in Lisp&quot;</span>
</span><span class="line">  <span class="ss">:author</span> <span class="s">&quot;Mark Simpson &lt;verdammelt@gmail.com&gt;&quot;</span>
</span><span class="line">  <span class="ss">:version</span> <span class="s">&quot;0.0.0&quot;</span>
</span><span class="line">  <span class="ss">:depends-on</span> <span class="p">(</span><span class="s">&quot;lisp-unit&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="ss">:components</span> <span class="p">((</span><span class="ss">:module</span> <span class="s">&quot;src&quot;</span>
</span><span class="line">			<span class="ss">:serial</span> <span class="no">t</span>
</span><span class="line">			<span class="ss">:components</span> <span class="p">((</span><span class="ss">:file</span> <span class="s">&quot;package&quot;</span><span class="p">)</span>
</span><span class="line">				     <span class="p">(</span><span class="ss">:file</span> <span class="s">&quot;gol&quot;</span><span class="p">))</span>
</span><span class="line">                <span class="p">(</span><span class="ss">:module</span> <span class="s">&quot;test&quot;</span>
</span><span class="line">			<span class="ss">:serial</span> <span class="no">t</span>
</span><span class="line">            <span class="ss">:depends-on</span> <span class="p">(</span><span class="s">&quot;src&quot;</span><span class="p">)</span>
</span><span class="line">			<span class="ss">:components</span> <span class="p">((</span><span class="ss">:file</span> <span class="s">&quot;package&quot;</span><span class="p">)</span>
</span><span class="line">				     <span class="p">(</span><span class="ss">:file</span> <span class="s">&quot;gol-test&quot;</span><span class="p">))))</span>
</span><span class="line">  <span class="ss">:in-order-to</span> <span class="p">((</span><span class="nv">test-op</span> <span class="p">(</span><span class="nv">load-op</span> <span class="ss">:gol</span><span class="p">)))</span>
</span><span class="line">  <span class="ss">:perform</span> <span class="p">(</span><span class="nv">test-op</span> <span class="p">(</span><span class="nv">o</span> <span class="nv">c</span><span class="p">)</span>
</span><span class="line">		    <span class="p">(</span><span class="k">progv</span>
</span><span class="line">			<span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nb">intern</span> <span class="s">&quot;*PRINT-ERRORS*&quot;</span> <span class="ss">:lisp-unit</span><span class="p">)</span>
</span><span class="line">			      <span class="p">(</span><span class="nb">intern</span> <span class="s">&quot;*PRINT-FAILURES*&quot;</span> <span class="ss">:lisp-unit</span><span class="p">))</span>
</span><span class="line">			<span class="o">&#39;</span><span class="p">(</span><span class="no">t</span> <span class="no">t</span><span class="p">)</span>
</span><span class="line">		      <span class="p">(</span><span class="nb">funcall</span> <span class="p">(</span><span class="nb">find-symbol</span> <span class="s">&quot;RUN-TESTS&quot;</span> <span class="ss">:lisp-unit</span><span class="p">)</span>
</span><span class="line">			       <span class="ss">:all</span> <span class="ss">:gol-test</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="my-god-its-full-of-yaks">My God… it’s full of yaks</h2>

<p>I’m just going to let that sink in for a bit while I get some coffee.</p>

<p>Ok, now that I’m back I will explain each part. The first interesting bit is
on line 6:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>depends-on </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="common-lisp"><span class="line">  <span class="ss">:depends-on</span> <span class="p">(</span><span class="s">&quot;lisp-unit&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This line tells ASDF that it should find and load a system called <code>lisp-unit</code>
because our system depends upon it. This is where QuickLisp makes things
simple since that is its job and it does a fine one at that.</p>

<p>Next is the definition of our components:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Defining the Components </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="common-lisp"><span class="line">  <span class="ss">:components</span> <span class="p">((</span><span class="ss">:module</span> <span class="s">&quot;src&quot;</span>
</span><span class="line">			<span class="ss">:serial</span> <span class="no">t</span>
</span><span class="line">			<span class="ss">:components</span> <span class="p">((</span><span class="ss">:file</span> <span class="s">&quot;package&quot;</span><span class="p">)</span>
</span><span class="line">				     <span class="p">(</span><span class="ss">:file</span> <span class="s">&quot;gol&quot;</span><span class="p">))</span>
</span><span class="line">                <span class="p">(</span><span class="ss">:module</span> <span class="s">&quot;test&quot;</span>
</span><span class="line">			<span class="ss">:serial</span> <span class="no">t</span>
</span><span class="line">            <span class="ss">:depends-on</span> <span class="p">(</span><span class="s">&quot;src&quot;</span><span class="p">)</span>
</span><span class="line">			<span class="ss">:components</span> <span class="p">((</span><span class="ss">:file</span> <span class="s">&quot;package&quot;</span><span class="p">)</span>
</span><span class="line">				     <span class="p">(</span><span class="ss">:file</span> <span class="s">&quot;gol-test&quot;</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I’ve decided that my project should have two main directories, one to contain
all the production source code and one for all the test source code. Each one
will be in their own packages, with the <code>:gol-test</code> package <code>:use</code>-ing the
<code>:gol</code> package. <code>:serial t</code> by the way tells ASDF that each item in the
component list depends upon the one before it.</p>

<p>Now the hairier parts which tell ASDF to run our tests:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Telling ASDF How to Test Our System </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="common-lisp"><span class="line">  <span class="ss">:in-order-to</span> <span class="p">((</span><span class="nv">test-op</span> <span class="p">(</span><span class="nv">load-op</span> <span class="ss">:gol</span><span class="p">)))</span>
</span><span class="line">  <span class="ss">:perform</span> <span class="p">(</span><span class="nv">test-op</span> <span class="p">(</span><span class="nv">o</span> <span class="nv">c</span><span class="p">)</span>
</span><span class="line">		    <span class="p">(</span><span class="k">progv</span>
</span><span class="line">			<span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nb">intern</span> <span class="s">&quot;*PRINT-ERRORS*&quot;</span> <span class="ss">:lisp-unit</span><span class="p">)</span>
</span><span class="line">			      <span class="p">(</span><span class="nb">intern</span> <span class="s">&quot;*PRINT-FAILURES*&quot;</span> <span class="ss">:lisp-unit</span><span class="p">))</span>
</span><span class="line">			<span class="o">&#39;</span><span class="p">(</span><span class="no">t</span> <span class="no">t</span><span class="p">)</span>
</span><span class="line">		      <span class="p">(</span><span class="nb">funcall</span> <span class="p">(</span><span class="nb">find-symbol</span> <span class="s">&quot;RUN-TESTS&quot;</span> <span class="ss">:lisp-unit</span><span class="p">)</span>
</span><span class="line">			       <span class="ss">:all</span> <span class="ss">:gol-test</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The first line is simply stating that in order to do <code>test-op</code> ASDF needs to
perform <code>load-op</code> on the <code>:gol</code> system. This way every time we run the tests
we’ll reload the system if needed.</p>

<p>Now… this next bit probably shows how rusty my Lisp is. Maybe there is an
easier way. Basically we want to run <code>(lisp-unit:run-tests :all :gol-test)</code>
with <code>lisp-unit:*print-errors*</code> and <code>lisp-unit:*print-failures*</code> both bound to
<code>t</code> (they default to <code>nil</code> and that doesn’t give enough info IMNSHO). However
when Lisp is reading and evaluating this code <code>lisp-unit</code> has probably not yet
been loaded - so we have to be crafty and find the symbol by name in the
package then <code>funcall</code> it. Binding the variables was trickier but I stumbled
upon <code>progv</code><sup id="fnref:7"><a href="#fn:7" class="footnote">7</a></sup> and that seems to be just what I needed.</p>

<p><code>progv</code> creates new dynamic bindings for the symbols in the list which is its
first argument. These symbols are determined at runtime. That means we can use
<code>intern</code> to find or create these symbols in the right package<sup id="fnref:8"><a href="#fn:8" class="footnote">8</a></sup>. <code>progv</code>
binds these symbols to the values in the list which is its second parameter
and then finally executes the sexp which is its third argument in an
environment which contains these new bindings.</p>

<p>With this work done I can now type in <code>(asdf:test-system 'gol)</code> into my REPL
and it loads and runs my tests and gives me useful output of those tests. I
might go so far as to bind that to a very short function name, or even a key
in Emacs.</p>

<h2 id="there-are-still-more-yaks-to-shave">There are still more yaks to shave.</h2>

<p>What is left to be determined is if this is the best way to do things.</p>

<p>Some documentation/blogs I read lead me to believe that putting the tests in
the same system with the production code is <em>verboten</em> (or at least a
<em>no-no</em>). I tried having the tests be in their own system definition
(depending upon the production code) but then ASDF &amp; QuickLisp both strongly
pushed me to have that definition it its own <code>.asd</code> file<sup id="fnref:9"><a href="#fn:9" class="footnote">9</a></sup> which seemed
awkward to me. I personally have no problem shipping tests with the production
code, and I believe that if needed all the symbols of the test package could
be <code>unintern</code>-ed before an image was saved if desired.</p>

<p>I’ll play around with this setup and see how things go.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>http://www.common-lisp.net/project/slime/ <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>http://www.quicklisp.org/ <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>https://github.com/OdonataResearchLLC/lisp-unit <a href="#fnref:3" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p>http://common-lisp.net/project/asdf/ <a href="#fnref:4" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:5">
      <p>http://common-lisp.net/project/asdf/asdf/Predefined-operations-of-ASDF.html#test_002dop <a href="#fnref:5" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:6">
      <p>Really? You don’t know what this is already and you had to look in the 
footnotes? Go look it upon Wikipedia already! <a href="#fnref:6" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:7">
      <p>http://www.lispworks.com/documentation/HyperSpec/Body/s_progv.htm#progv <a href="#fnref:7" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:8">
      <p>Perhaps I should use <code>find-symbol</code> instead so that I don’t create
symbols that the package doesn’t export. I will experiment with that. <a href="#fnref:8" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:9">
      <p>since they look up the defintion by looking for a file with the same
name as the system <a href="#fnref:9" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Reading Code]]></title>
    <link href="http://code-and-cocktails.heroku.com/blog/2013/11/25/on-reading-code/"/>
    <updated>2013-11-25T22:51:00-05:00</updated>
    <id>http://code-and-cocktails.heroku.com/blog/2013/11/25/on-reading-code</id>
    <content type="html"><![CDATA[<h2 id="how-it-ought-to-be-done">(How It Ought To Be Done)</h2>

<p>IMNSHO<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup>.</p>

<p>Being able to read source code<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup> is very important. So how does
one do it well?</p>

<p>Just like reading any other material - first decide why is one reading it.
Why is one reading the listing? Is one debugging a problem or trying to gain
specific knowedge?; or reading to get general or pleasure? One takes different
approaches depending upon the desired goal.</p>

<p>The first step is to find an interesting spot to start.</p>

<h3 id="for-debugging-or-to-gain-specific-knowledge">For Debugging (or to Gain Specific Knowledge)</h3>

<p>Start by skimming of the code, <code>grep</code><sup id="fnref:3"><a href="#fn:3" class="footnote">3</a></sup> and <code>tags</code><sup id="fnref:4"><a href="#fn:4" class="footnote">4</a></sup> tables are useful for
this. This will help one find the right, or at least likely entry point.
There is a lot of <em>instinct</em><sup id="fnref:5"><a href="#fn:5" class="footnote">5</a></sup> involved in this step. One gets better at it
the more one needs to do it<sup id="fnref:6"><a href="#fn:6" class="footnote">6</a></sup>.</p>

<h3 id="to-get-general-knowledge-or-for-pleasure">To Get General Knowledge (or for Pleasure)</h3>

<p>Code is for reading<sup id="fnref:7"><a href="#fn:7" class="footnote">7</a></sup> so read it. Skim the code (<em>including</em> the tests<sup id="fnref:8"><a href="#fn:8" class="footnote">8</a></sup>).
Look for something interesting, get the lay of the land, the shape of the
code. Note the <em>Dramatis Personæ</em>. Perhaps the code seems to be about widgets
and frobbing, oh and here’s something about twiddling that looks interesting.</p>

<p>Pick one of these that is most intriguing (e.g. One wonders what happens when
a widget is frobbed.) and use that as one’s entry point. This is a matter of
personal taste/fetish<sup id="fnref:9"><a href="#fn:9" class="footnote">9</a></sup>.</p>

<h3 id="now-that-one-has-ones-entry-point">Now that One has One’s Entry Point…</h3>

<p>Now that one is staring in the face a chunk, hopefully a small chunk, of code;
how does one read it?</p>

<p><strong>Top Down</strong>. It is as simple as that<sup id="fnref:10"><a href="#fn:10" class="footnote">10</a></sup>.</p>

<p>Read the first line of code, what does it say? Believe it. That can be risky -
but at this point one must do it. What does the next line say, and so on.
Follow function calls<sup id="fnref:11"><a href="#fn:11" class="footnote">11</a></sup> if they seem interesting. Skip over things that are
not, or do not seem relevant.  If one’s interest is in frobbing ignore code
about tweaking or twiddling.  Perhaps one makes a note that frobbing seems to
involve tweaking or twiddling; but one must know about frobbing now so those
are <strong>not relevant</strong>. This is also very tied to instinct.</p>

<p>It is this point here which I think is most important. One must gain a sense
of what is relevant when reading code. One cannot read every code path and
think that will lead to understanding. That would be like reading the
dictionary and assuming one knows the language. This is where I have seen
programmers fail in their reading.</p>

<p>This is a very good reason why naming is so important<sup id="fnref:12"><a href="#fn:12" class="footnote">12</a></sup>.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>It has occurred to me that my style of reading code is not the same as
some other’s. I have been told by a person I think highly of that they 
feel my way is the/a right way. I have finally gotten around to writing it 
up as a quick blog post. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>Is it time for us to stop calling it ‘code’ given its implications of
obfuscation? I think it is still appropriate as long as we remember that 
the definition is not about obfuscation <em>per se</em> but about using a set of 
symbols to mean other words/letters/symbols. This is, IMNSHO, exactly what 
we are doing. <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>Or its ilk (<em>e.g.</em> <code>ack</code>) <a href="#fnref:3" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p>New fangled IDEs keep the equivalent of tags tables. <a href="#fnref:4" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:5">
      <p>Gut feeling, hunch, guess work, randomness, luck <em>&amp;c.</em> <a href="#fnref:5" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:6">
      <p>Especially when at the client site, trying to figure out why the trades
are not going through. Take my word on it. <a href="#fnref:6" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:7">
      <p>Most often code is for reading (and evaluating/compiling) by the
computer; but also for oneself and one’s fellow humans. (Apologies for
being speciest.) <a href="#fnref:7" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:8">
      <p>Why do we keep referring to code <em>and</em> test? Tests <em>are</em> code. <a href="#fnref:8" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:9">
      <p><a href="https://www.google.com/search?q=cat+photobomb">Go ahead.</a> <a href="#fnref:9" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:10">
      <p>Of course it is not that simple. <a href="#fnref:10" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:11">
      <p>And other sorts of papered over <code>goto</code> statements. <a href="#fnref:11" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:12">
      <p>Perhaps a post/rant for another day. <a href="#fnref:12" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
