<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: code | Code And Cocktails]]></title>
  <link href="http://code-and-cocktails.herokuapp.com/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://code-and-cocktails.herokuapp.com/"/>
  <updated>2020-11-13T21:22:08-05:00</updated>
  <id>http://code-and-cocktails.herokuapp.com/</id>
  <author>
    <name><![CDATA[Mark Simpson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Make same things similar, different things dissimilar]]></title>
    <link href="http://code-and-cocktails.herokuapp.com/blog/2012/11/24/make-same-things-similar/"/>
    <updated>2012-11-24T14:46:00-05:00</updated>
    <id>http://code-and-cocktails.herokuapp.com/blog/2012/11/24/make-same-things-similar</id>
    <content type="html"><![CDATA[<h2 id="abstract">Abstract</h2>

<p>Whilst fixing some bugs in data file parsing code I found that the bugs lie in
the fact that the types of data files were more similar than not; but the code
said that they were more dissimilar than similar. Refactoring to make same
code same fixed at least part of the bugs on its own.</p>

<h2 id="a-story">A Story</h2>

<p>On my current project we have some code that reads data files and puts the
data into the database. The files come in different formats and layouts,
however there are only really two different kinds of files. I have always
maintained that the processing of these two types of files are more same than
different. <em>i.e.</em> How to read an excel file with the data laid out <em>just so</em>
and put that data into the database is all the same whereas the way to
validate if <em>this</em> line in the file a data line or something to ignore, or how
to split all the data into larger logical chunks (required before putting into
the database) is perhaps different between these two types of files.</p>

<p>I was very involved in the creation of the code for the reading of the first
type of data file; but not very involved for the second. Recently when we
shook out some bugs in the parsing of the second type of file I found myself
in the code for both types of files fixing the bugs.</p>

<p>I found that the code implied that the two files were more different than I
had imagined. Code that I thought would be similar or even exactly the same
was not. This difference could be seen on multiple levels; from the naming of
things up to the factoring of the code into methods and classes.</p>

<p>As I reviewed the bugs I had to fix I saw that the bugs were stating that the
second type of file was in fact not so different from the first type. As far
as the user was concerned much of the “rules” of parsing were exactly the
same.</p>

<p>The first thing I did was make the code for the second type of file much more
similar to the first type. This involved renaming and refactoring. Then once
things were much more the same I extracted the sameness into the base class
(which had already existed). By doing this refactoring at least parts of the
bugs were fixed. All that was left was some tweaking to the code left behind
which defined the <em>difference</em>.</p>

<h2 id="conclusion">Conclusion</h2>

<p>This coding really showed to me the importance of keeping a consistency in the
code. Things which are the same should be named and look the same. Things
which are different should <em>NOT</em> named the same or look the same; they must be
kept dissimilar.  The compiler doesn’t care of course; but I think it will
help the programmer.</p>

<p>Not keeping to this ‘rule’ I think will lead to bugs where things which should
be the handled in the same or similar manner are mistakenly not since they
appear to the following developers to be different. Or even more simply
because the commonality was not extracted earlier because it was not noticed.</p>

<p>The way to keep this in mind is not not just think if the code is factored
well or has good naming; but also if the code you wrote is similar or
dissimilar to other code around it - and if that is correct or not.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Delivery vs. Code Quality: Any Corners Safe To Cut?]]></title>
    <link href="http://code-and-cocktails.herokuapp.com/blog/2012/11/13/delivery-vs-code-quality-any-corners-safe-to-cut/"/>
    <updated>2012-11-13T20:32:00-05:00</updated>
    <id>http://code-and-cocktails.herokuapp.com/blog/2012/11/13/delivery-vs-code-quality-any-corners-safe-to-cut</id>
    <content type="html"><![CDATA[<p>The balancing act between delivering vs. code quality has been on my mind
lately. It seems to me that there are times when delivery trumps code quality.
But sacrificing code quality for delivery speed results in slower delivery of
future features.</p>

<p>(‘Code Quality’ here is defined as ‘good design’, ‘easy to change’, ‘easy to
understand’. This is not about quality as in free-of-bugs: that is <strong>not</strong> a
corner I will cut. I am also not suggesting writing <em>shit</em>.)</p>

<p>Are there any corners which are <em>safe</em> to cut? I have a feeling there is no
good answer; but is there a <em>right</em> answer?</p>

<p>I suppose as a bottom line the best to do is to keep the corner-cutting
explicit and visible to all people involved (that includes non-developers) so
that the eventual slowdown will not be a surprise.</p>

<p>Or is this just an invalid assumption on my part? Is there any time that
delivery can trump code quality? I know that everyone says that keeping code
quality high is the only way to go quickly
(<a href="http://twitter.com/unclebobmartin">@unclebob’s</a> pithy: “The only way to go
fast is to go well”). But that seems to be to be about the long term; I am
talking about short term speed gains.</p>

<p>This is something I’m going to continue to think about; I’d love to hear your
thoughts on this.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Having a conversation with your code]]></title>
    <link href="http://code-and-cocktails.herokuapp.com/blog/2012/11/09/having-a-conversation-with-your-code/"/>
    <updated>2012-11-09T10:03:00-05:00</updated>
    <id>http://code-and-cocktails.herokuapp.com/blog/2012/11/09/having-a-conversation-with-your-code</id>
    <content type="html"><![CDATA[<p>Just sat in on a talk by Cory Foy entitled “When Code Cries: Listening to What
Your Code is Saying”.</p>

<p>(Warning: there will be anthropomorphizing of source code in this post)</p>

<p>One thing I wanted to pull out of it is the idea of <em>listening</em> to your code.
Really listening. Like it was a person.</p>

<p>I don’t think it is just listening to code - but a conversation with code. The
programmer is talking about what they need, and the code is telling the
programmer what it needs. It is a give and take like any conversation. If one
side of the conversation tries to dominate, or ignores the other, the outcome
will not be successful. Like any conversation the failure may not be immediate
but later when misunderstandings between the parties of the conversation cause
problems.</p>

<p>Listening is not easy however. To really listen you have to:</p>

<ul>
  <li>Decide to listen</li>
  <li>Listen for the whole message</li>
  <li>Let go of your personal agenda</li>
  <li>Be patient</li>
  <li>Be curious</li>
  <li>Test for understanding</li>
</ul>

<p>I personally have problems with listening patiently for the whole message.  I
tend to jump in, trying to add things, perhaps of my own agenda, saying things
starting with “So what you’re saying is…” instead of just waiting to find
out what is being said. With code this comes out when I too quickly jump to
refactorings or thinking that my coding task is done - because I’m not
listening to the code.</p>

<p>Having a conversation with code is not easy either. Mike Clement
<a href="https://twitter.com/mdclement">@mdclement</a> likened it to talking with his 18
month old child. They can’t talk - but they are trying to communicate. One
needs to be patient in order to get the message.</p>

<p>I am working on being a better listener, with people, but I can see that I
need to work on those skills for my code as well.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My problems bootstrapping Midje]]></title>
    <link href="http://code-and-cocktails.herokuapp.com/blog/2012/04/24/my-problems-bootstrapping-midje/"/>
    <updated>2012-04-24T20:23:00-04:00</updated>
    <id>http://code-and-cocktails.herokuapp.com/blog/2012/04/24/my-problems-bootstrapping-midje</id>
    <content type="html"><![CDATA[<h2 id="a-tragedy-of-my-own-devising">(<em>A Tragedy of My Own Devising</em>)</h2>

<h2 id="abstract">Abstract</h2>
<p>I had a lot of problems setting up my first <a href="https://github.com/marick/Midje">Midje</a> tests for my <a href="http://clojure.org/">Clojure</a>
project <a href="http://defdrink.heroku.com">(defdrink)</a> last night and thought it might be useful for me to
write about it.</p>

<p>(And helpful it was… I see plenty of mistakes I made and summarize the
lessons learned at the end).</p>

<h2 id="background">Background</h2>

<p>First a quick background. <a href="http://defdrink.heroku.com">(defdrink)</a> will be/is a web application which
will assist in the choosing of a cocktail based upon the contents of the users
liquor cabinet. I am using this project as a means of learning <a href="http://clojure.org/">Clojure</a>. I
have put all the source on <a href="https://github.com/verdammelt/defdrink">github</a> (as one does…) and in
this post will refer to particular commits to illustrate different steps.</p>

<h2 id="in-the-beginning">In the Beginning…</h2>

<p>At the point where our story begins I had slapped together a quick (and ugly)
prototype. The purpose of the prototype was to get a Clojure project which has
a web page which allowed retrieving and saving data into a database; all
served up on Heroku. Being a prototype - it had not tests (horrors). This
moment in time is <a href="https://github.com/verdammelt/defdrink/tree/0da77fbafc87634e94e0342e409e5b071b8d6c1f">commit 0da77fbafc87634e94e0342e409e5b071b8d6c1f</a>.</p>

<h2 id="trying-to-put-in-the-first-midje-test">Trying to put in the first Midje test.</h2>

<p>It took me two tries to get my first Midje test (and that first test merely
proved that Arithmetic worked: <code>(fact (+ 2 2) =&gt; 4)</code>).</p>

<p>My first attempt was me doing what I thought was ‘obvious’ and what I thought
the Midje wiki was telling me I should be able to do: put a bit of magic in my
<code>projects.clj</code> file and then a test file with a <code>(fact ...)</code> in it.</p>

<p>That attempt ending with frustration at the fact the only feedback I was
getting was a bunch of Java stack traces.</p>

<p>My second attempt was simply making these same stumblings - I had wrongly
assumed that I had I simply not <em>quite</em> understood the previous time.</p>

<p>After I realized that my second attempt was heading toward another failure I
finally rolled back and tried to take the next smallest step.  I wanted to run
Midje (with <a href="https://github.com/stuartsierra/lazytest">Lazytest</a>) and get it to report something like “0 tests”. With
the help of the <a href="https://github.com/marick/lein-midje">lein-midje plugin Readme</a> I got this
<a href="https://github.com/verdammelt/defdrink/commit/cd4fad91dbcb7803f49f234474bbb3d3ad3d1295">working</a> in not too much time. If you look at that commit
you will notice a glaring error - one that was not obvious to me as I tried to
continue.</p>

<h2 id="my-first-midje-test">My first Midje test…</h2>

<h3 id="a-problem-of-my-own-devising">A Problem of My Own Devising</h3>

<p>Ages ago when I started this project I ran <code>lein new defdrink</code> and then, since
I didn’t have any tests, I removed the <code>test</code> subdirectory. Now, a month
later, I couldn’t remember just how the test directory was supposed to be laid
out, and it was obvious to me that it needed to have some special directory
tree/naming to find the files etc. Mixed into that was a lack of understanding
Clojure namespaces and directory structures (this was just me being dense).
At this point I kept getting stack traces about not finding namespaces, which
all seemed right - but obviously lein, midje, clojure or all three didn’t
agree.</p>

<p>Finally I had just ran <code>lein new foo</code> in a temp directory and saw the
structure needed.  That was the clue I needed – the clue  I couldn’t find
this little simple piece of information out on the web either for Midje or
Clojure’s own test framework. Now that I had the directory structure right,
the namespace in the file right it would work right? <em>Right?</em></p>

<h3 id="wrong">…wrong…</h3>

<p>As I am sure all of you playing along at home can see - I never added a
dependency on Midje itself in the previous step. That means at this point I
started getting messages that said:</p>

<blockquote>
  <p>Could not locate midje/sweet__init.class or midje/sweet.clj on classpath</p>
</blockquote>

<p>Let me tell you this was very confusing after all I knew that I already
had Midje working. Now that I added a test it says it can’t find Midje?!
Finally I saw my error and fixed it.  Now at long last, I had a Midje test!
Of course it was just a <a href="https://github.com/verdammelt/defdrink/commit/0c3840cea7d4f5e1d0258a8cd6b087f949e0c6c2">dummy test</a> but it was actually running.</p>

<h2 id="now-lets-do-it-for-reals">Now, let’s do it for reals…</h2>

<p>My next step was to get a real test. My premise for these tests was to remove
some hardcoded SQL code in my model class. I was going to push that code down
into a couple helper classes so that I could isolate myself from the database.
The first test was to show that my <code>defdrink/all</code> method would delegate down
to my new <code>sql/select</code> method with the <code>:drinks</code> parameter (that is the
table name).</p>

<p>I once again had some odd and annoying problems with the only feedback being
cryptic stack traces.  I don’t remember all the details but they involved
statements such as ‘provided not being defined in this context’ - which led me
down wild chases to determine if I had all the right modules required etc.
Fortunately/unfortunately the problems resolved themselves (I hate that) and I
got my first <a href="https://github.com/verdammelt/defdrink/commit/dfc494f7b4ea50b67138605308be1967d9d8dcd4">real test running</a>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>A Small Step for One Programmer</span><a href='https://github.com/verdammelt/defdrink/blob/dfc494f7b4ea50b67138605308be1967d9d8dcd4/test/defdrink/test/models/drinks.clj'>defdrink/test/defdrink/test/models/drinks.clj </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(fact (all) =&gt; […drink1… …drink2…]
</span><span class='line'>      (provided (sql/select :drinks) =&gt; […drink1… …drink2…]))</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>(I sort of like how it turned out… I like the <a href="https://github.com/marick/Midje/wiki/Metaconstants">metacontstants</a> feature and
am excited to try it out more.)</p>

<h2 id="and-now-for-my-encore">And now for my encore…</h2>

<p>Now that the select statement was sequestered, I turned my attention to the
insert statement.  This is where I again ran into problems.</p>

<p>This new test, like the previous, was going to be a simple test of delegation.
Did the model layer properly call down to the database layer to query or
persist the data.  The test I wanted to write was to say that the
<code>defdrink/save</code> method called the <code>sql/insert</code> method with the correct
parameters.  My first attempt at this ended… (wait for it…) in
frustration.</p>

<h3 id="whats-wrong-this-time">What’s wrong <em>THIS</em> time?!</h3>

<p>In Ruby or Java/Groovy I’d simply have my test call my method and test the
expectation on my mock object that the <code>sql/insert</code> method was called with the
correct parameters. Unfortunatly for me, I could not figure out how to do that
in Midje. I ended with the following unhappy test:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>An Unhappy Test</span><a href='https://github.com/verdammelt/defdrink/blob/9fbb73b327e7509e2612932dfedc97e8e55330ce/test/defdrink/test/models/drinks.clj'>defdrink/test/defdrink/test/models/drinks.clj </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(fact
</span><span class='line'>     (insert …name…) =&gt; …not-important…
</span><span class='line'>     (provided (sql/insert :drinks {:name …name…}) =&gt; …not-important…))</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I’ll freely admit that while trying to write this test I began to have doubts
(which I still hold) that perhaps I shouldn’t even by <em>trying</em> to right this
test. It just seemed like a code smell to me. The way the test ended up seems
to be telling me: “Mark, just what are you thinking?!”</p>

<h2 id="conclusion">Conclusion</h2>

<p>In conclusion (finally) my problems were much of my own devising. Whether it
was shooting myself in the foot, trying to do something quickly because “its
easy right?”, not yet understanding this language/environment I am trying to
work in, or simply because I am trying to write Clojure tests as I would Ruby
or Java tests – I’ve had a hard time getting to <a href="https://github.com/verdammelt/defdrink/tree/9fbb73b327e7509e2612932dfedc97e8e55330ce">this point</a>.</p>

<p>Even admitting my own problems, I have to say, IMNSHO that it would have been
nice to see a tutorial/cookbook out there of how to get started with Midje.
What I’d have liked to have found would be something which stepped me through:</p>

<ol>
  <li>what to put in my <code>project.clj</code> file for midje, lazytest, and lien</li>
  <li>a simple example of getting one’s first tests off the ground</li>
  <li>and then a bit more showing mocking for example.</li>
</ol>

<p>In researching this blog post I see I did overlook some resources on the Midje
wiki that would have helped, at least with the second two points.</p>

<p>So the moral is:</p>

<ol>
  <li>slow down</li>
  <li>small steps</li>
  <li><em>read</em> the docs, not just look at them.</li>
</ol>

<p>I do think I might try to contribute this sort of tutorial to the Midje
project. Because I can’t be the only dope who thinks he knows what he’s
doing, who will get frustrated because there is not a tutorial to hold his
hand through the first steps.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code'n'Cocktails - crazy idea?]]></title>
    <link href="http://code-and-cocktails.herokuapp.com/blog/2012/01/15/coden-cocktails-crazy-idea/"/>
    <updated>2012-01-15T19:20:00-05:00</updated>
    <id>http://code-and-cocktails.herokuapp.com/blog/2012/01/15/coden-cocktails-crazy-idea</id>
    <content type="html"><![CDATA[<p>I jokingly I mentioned the idea of Code’n’Cocktails on Twitter…</p>

<p>https://twitter.com/#!/verdammelt/status/158292007981289472</p>

<p>This was shortly after a short conversation while partaking of aprés
<a href="http://groups.google.com/group/boston-software-craftsmanship?pli=1">Boston Software Craftsmanship</a> beers in which I was asked about
cocktails and someone suggested getting cocktails after the meeting next time.
It was also immediately after I was asked when we were going to get cocktails
by <a href="https://twitter.com/#!/zdsbs">@zdsbs</a> (prompted by my tweeting I had just purchased <a href="http://www.amazon.com/Absinthe-Cocktails-Green-Fairy-ebook/dp/B006L63108">a book of
Absinthe Cocktail recipes</a>).</p>

<p>I did but jest (<em>poison in jest; no offense i’the world</em> [Hamlet
III.ii.234-235])…</p>

<p>But now I am thinking it through.</p>

<p>I have heard of <a href="http://www.meetup.com/london-software-craftsmanship/events/48227772/">‘Code &amp; Coffee’</a>
and thought it a good idea.  A place to meet people who like code and coffee.
While I <strong>really</strong> like coffee, I also like cocktails and I seem to be
surrounded by people who get up later than I do - so why not meet <em>after</em> work
for cocktails and code?  <em>Brilliant!</em></p>

<p>So what would a Code’n’Cocktail look like?  I see a few possibilities:</p>

<ol>
  <li>A cocktail party where code/coding is the topic of conversation</li>
  <li>A coding dojo/coderetreat/code kata session with booze</li>
  <li>A <a href="http://en.wikipedia.org/wiki/Salon_(gathering)"><em>salon</em></a> for
coding</li>
</ol>

<p>I think the first and last are very similar and given my inclinations I like
the connotations of referring to it as a <em>salon</em>.  I think that would be my
preference.  I would not want to limit it entirely to discussion; so some
coding would be good.</p>

<p>What do I hope attendees would get out of such an event?  I think attendees
should have fun and at least one of: learn something, teach something, make
contacts.</p>

<p>This sort of event would have to happen at a bar or someone’s home.  I don’t
see how it could happen at someone’s workplace or a place like <a href="http://microsoftcambridge.com/Default.aspx">NERD</a> as it
<strong>obviously</strong> needs a well stocked bar.  The problem is location.  The
Location would need to be able to accommodate an prior-to-event unknown number
of people (making a reservation would be difficult); and accommodate the
possibility of coding (standing at a bar may not work).  I think an off night
at a bar might work - the place would love to get business on a slow night…</p>

<p>The gears in my mind are turning.  If you have interest or thoughts please
comment or contact me.</p>

]]></content>
  </entry>
  
</feed>
