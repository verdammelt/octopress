<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: repl | Code And Cocktails]]></title>
  <link href="http://code-and-cocktails.heroku.com/blog/categories/repl/atom.xml" rel="self"/>
  <link href="http://code-and-cocktails.heroku.com/"/>
  <updated>2020-11-13T10:13:50-05:00</updated>
  <id>http://code-and-cocktails.heroku.com/</id>
  <author>
    <name><![CDATA[Mark Simpson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TDD and REPL analogies?]]></title>
    <link href="http://code-and-cocktails.heroku.com/blog/2011/04/13/tdd-and-repl-analogies/"/>
    <updated>2011-04-13T22:44:00-04:00</updated>
    <id>http://code-and-cocktails.heroku.com/blog/2011/04/13/tdd-and-repl-analogies</id>
    <content type="html"><![CDATA[<p><em>(a half-baked thought)</em></p>

<p>In a <a href="http://code-and-cocktails.herokuapp.com/blog/2011/04/13/how-i-learned-agile-all-wrong-and-still-ended-up-liking-it/">previous post</a> I realized that to me TDD has a little bit
of the same feel as working in a REPL. When I first learned the technique it
really clicked for me since I always preferred what i referred to as
<em>exploratory</em> coding, that is, cycles of trying out little changes and moving
toward the solution of the whole problem.</p>

<p>In a language with a REPL this exploratory coding is pretty normal. It is very
natural to try something, <strong>play</strong> with ideas, and periodically save off the
code you want. Without a REPL and TDD the cycle is slower, which leads to
making larger changes since the cost of small changes is so high. Without a
REPL, but with TDD, the cycles can be kept pretty short: short cycles of unit
tests, longer cycles of integration and end-to-end testing.</p>

<p>So TDD gives one the ability to try out ideas quickly like in a REPL. It is
not as good as a REPL.  Of course TDD has other effects so the fact it is not
a REPL is made up for. But, to me, the benefit of being able to <em>play</em> with
ideas, trying lots of things, saving the good and discarding the bad should
not be forgotten.</p>

<p>As an example of this sort of REPL/TDD based play I offer <a href="http://michaelfeathers.typepad.com/michael_feathers_blog/2011/01/the-string-calculator-kata-in-haskell.html">this video</a> 
from Mike Feathers doing the <a href="http://osherove.com/tdd-kata-1/">String Calculator</a> kata in Haskell.</p>

]]></content>
  </entry>
  
</feed>
