<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Code And Cocktails]]></title>
  <link href="http://code-and-cocktails.herokuapp.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://code-and-cocktails.herokuapp.com/"/>
  <updated>2020-11-13T21:22:08-05:00</updated>
  <id>http://code-and-cocktails.herokuapp.com/</id>
  <author>
    <name><![CDATA[Mark Simpson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mocking class constructor in Python with Mockito]]></title>
    <link href="http://code-and-cocktails.herokuapp.com/blog/2015/01/18/mocking-class-constructor-in-python-with-mockito/"/>
    <updated>2015-01-18T20:08:59-05:00</updated>
    <id>http://code-and-cocktails.herokuapp.com/blog/2015/01/18/mocking-class-constructor-in-python-with-mockito</id>
    <content type="html"><![CDATA[<p>In the current code I’m working on we once and a while want to mock
the constructor of a class. It is only really needed because we have a
few classes who sadly do heavy-lifting in their constructors.</p>

<p>The common wisdom on the team was “you can’t do that”, but it bugged
me and I eventually googled the right things and found out how to do
it. The moment I did it myself I realized that it was obvious. Let me
explain.</p>

<p>In [Python Mockito][https://code.google.com/p/mockito-python/] the
standard form of stubbing is done with the <code>when</code> function, operating
upon an object:</p>

<pre><code class="language-python">when(obj).method(arg1, arg2).thenReturn(5)
</code></pre>

<p>This states that <code>when</code> <code>obj.method</code> is called with arguments <code>arg1</code>
and <code>arg2</code> then return <code>5</code>. (There are other things to do besides
<code>thenReturn</code> but for purposes of this discussion that is enough).</p>

<p>What about if you want to mock a constructor? The naïve approach is to
try:</p>

<pre><code class="language-python">when(Klass).__init__(arg1, arg2).thenReturn(fakeKlassInstance)
</code></pre>

<p>But that doesn’t work. It will return an error equivalent to “NoneType
does not have an attribute thenReturn”.</p>

<p>Making it work is pretty simple. Let’s say that <code>Klass</code> is defined in
a module called <code>klass</code>. Then we can do the following:</p>

<pre><code class="language-python">import klass
when(klass).Klass(arg1, arg2).thenReturn(fakeKlassInstance)
</code></pre>

<p>It works because a module is an object on which the classes are
methods! It was so obvious when I saw it work. The clues were right in
from of my face, calling the constructor of a class is as simple as
using the class name <em>as if</em> it were a function. That’s because <em>it
is</em>! I’d like to blame too many years of Java &amp; C# where “importing”
is more about telling the linker where to find things than about
creating objects that can be manipulated.</p>

<p>So to sum up: a class is a method on a module which returns an
instance of that class. When you import a module you are creating a
variable of that name bound to an object which represents that module.</p>

<hr />

<p>Here is a test file which can be used to play with this idea. Note it
uses the fact that the name of the current modules is bound to a
variable called <code>__name__</code> and that <code>sys.modules</code> is a hash of all
modules.</p>

<pre><code class="language-python">import sys
import mockito

class Foo(object):
    def __init__(self):
        self.x = 5

    def method(self):
        return 10


f = Foo()
print f.method()
mockito.when(f).method().thenReturn('blah')
print f.method()

# This will not work and throw an error.
# print Foo()
# mockito.when(Foo).__init__(mockito.any()).thenReturn('blah')
# print Foo()

print Foo()
mockito.when(sys.modules[__name__]).Foo().thenReturn('blah')
print Foo()
</code></pre>
]]></content>
  </entry>
  
</feed>
