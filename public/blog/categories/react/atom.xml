<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: react | Code And Cocktails]]></title>
  <link href="http://code-and-cocktails.heroku.com/blog/categories/react/atom.xml" rel="self"/>
  <link href="http://code-and-cocktails.heroku.com/"/>
  <updated>2020-10-21T09:03:10-04:00</updated>
  <id>http://code-and-cocktails.heroku.com/</id>
  <author>
    <name><![CDATA[Mark Simpson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Initial Emacs Setup for React/ReactNative]]></title>
    <link href="http://code-and-cocktails.heroku.com/blog/2016/01/10/emacs-setup-for-react-slash-reactnative/"/>
    <updated>2016-01-10T16:09:42-05:00</updated>
    <id>http://code-and-cocktails.heroku.com/blog/2016/01/10/emacs-setup-for-react-slash-reactnative</id>
    <content type="html"><![CDATA[<p><small>(Cross posted to the <a href="http://www.cyrusinnovation.com/initial-emacs-setup-for-reactreactnative/">Cyrus Innovation Blog</a>)</small></p>

<p>It looks likely that I’ll be doing some ReactNative work soon so I
took some time to start setting up my Emacs environment. All my
relevant setup can be found in the
<a href="https://github.com/verdammelt/dotfiles/blob/master/.emacs.d/init-react.el">init-react.el file in my GitHub dotfiles repository</a>.
This is likely to change so the previous link may not match the code
below. The code below matches specifically the
<a href="https://github.com/verdammelt/dotfiles/commit/59e7728c3743961b49fcdd8012703c4a46b9ee65">initial version (59e7728)</a>.</p>

<p>Hereinbelow I will add more annotation to those already found in that
file along with snippets of code.</p>

<p>The first thing that needed to be set up was a mode for React code.
React code files can mix Javascript with HTML markup and it does not
appear that <code>js-mode</code> (the built-in JavaScript mode) handles that.
After a short Googling it looks like
<a href="http://web-mode.org/"><code>web-mode</code></a> is a mode that can handle it. After
some brief testing it does appear to work reasonably. It appears that
the React/ReactNative community has not decided to use <code>*.js</code> or
<code>*.jsx</code> as the extension for the code files and since <code>web-mode</code>
appears to handle JavaScript just fine I chose to use it in all cases.</p>

<pre><code class="language-lisp">(add-to-list 'auto-mode-alist '("\\.jsx?$" . web-mode))
</code></pre>

<p>The next thing I wanted to get set up was a linter. I thought this
especially important as React uses an ES6 dialect of JavaScript which I
am not entirely familiar with yet and a linter can help me “do the
right thing”. With a suggestion from a coworker (who has done some
React work) I chose <a href="http://eslint.org/">ESLint</a> with the
<a href="https://www.npmjs.com/package/eslint-config-airbnb">AirBnB</a>
configuration settings. These defaults prompted me to standardize on two
spaces for indentation. (Setting <code>js-indent-level</code> as js-mode is still
in use for JSON files.)</p>

<pre><code class="language-lisp">  (setq web-mode-markup-indent-offset 2
        web-mode-css-indent-offset 2
        web-mode-code-indent-offset 2)
  (setq js-indent-level 2)
</code></pre>

<p>Setting up the linter to run via <a href="http://www.flycheck.org/">flycheck</a>
took a small amount of work since I don’t like to install project
specific tools globally. (I know that this is contrary to current
mores, but I have been tripped up by global vs. local installations
before so I shy away from them when I can.)</p>

<p>First I needed to integrate NVM with Emacs so that Emacs could run
ESLint at all.</p>

<pre><code class="language-lisp">(require 'nvm)
(nvm-use (caar (last (nvm--installed-versions))))
</code></pre>

<p>(The choice to use the last version found is totally arbitrary. If and
when I get more versions of Node.js on my machine I’ll have to make a
more careful choice.)</p>

<p>Next I hooked into <a href="http://batsov.com/projectile/">projectile</a> to look
for a locally installed ESLint and use it if found. The
<code>projectile-after-switch-project-hook</code> functions are called <em>after</em>
Projectile has switched directories to the project so one can simply
check the project for the desired file.</p>

<pre><code class="language-lisp">(add-hook 'projectile-after-switch-project-hook 'mjs/setup-local-eslint)

(defun mjs/setup-local-eslint ()
    "If ESLint found in node_modules directory - use that for flycheck.
Intended for use in PROJECTILE-AFTER-SWITCH-PROJECT-HOOK."
    (interactive)
    (let ((local-eslint (expand-file-name "./node_modules/.bin/eslint")))
      (setq flycheck-javascript-eslint-executable
            (and (file-exists-p local-eslint) local-eslint))))
</code></pre>

<p>(Note: the function is interactive because I found at least a few
times I was looking at a JavaScript file which I had come to <em>not</em> via
projectile. By making it interactive lets me use it manually in the
rare case I need to.)</p>

<p>Flycheck’s ESLint integration is limited to only certain modes and
<code>web-mode</code> is not one of them so I needed to add that to the
white-list of modes</p>

<pre><code class="language-lisp">  (with-eval-after-load 'flycheck
    (push 'web-mode (flycheck-checker-get 'javascript-eslint 'modes))))
</code></pre>

<p>With that I can easily write React/ReactNative code with all the bells
and whistles I like.</p>

<p>Later I will add support for building and testing I’m sure. But first
I need to determine what building &amp; testing in a ReactNative
environment will even look like.</p>

]]></content>
  </entry>
  
</feed>
