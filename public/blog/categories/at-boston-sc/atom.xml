<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: @boston_sc | Code And Cocktails]]></title>
  <link href="http://code-and-cocktails.herokuapp.com/blog/categories/at-boston-sc/atom.xml" rel="self"/>
  <link href="http://code-and-cocktails.herokuapp.com/"/>
  <updated>2021-03-02T10:47:45-05:00</updated>
  <id>http://code-and-cocktails.herokuapp.com/</id>
  <author>
    <name><![CDATA[Mark Simpson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Seven Deadly Sins of Programming]]></title>
    <link href="http://code-and-cocktails.herokuapp.com/blog/2012/05/14/seven-deadly-sins-of-programming/"/>
    <updated>2012-05-14T22:14:00-04:00</updated>
    <id>http://code-and-cocktails.herokuapp.com/blog/2012/05/14/seven-deadly-sins-of-programming</id>
    <content type="html"><![CDATA[<p>At tonightâ€™s Boston Software Craftstmanship meetup I presented my lightning
talk: Seven Deadly Sins of Programming. It is a half baked idea - take it with
a grain of salt.</p>

<p>Attached are the <a href="assets/deadlysins.pdf">PDF slides</a>.</p>

<p>The source code for the presentation (done in the <a href="http://en.wikipedia.org/wiki/Beamer_(LaTeX)">Beamer</a> package for
<a href="http://www.latex-project.org/">LateX</a>) is on <a href="https://github.com/verdammelt/SevenDeadlySins">my github</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing a Unit Test Framework in a Language You are Trying to Learn]]></title>
    <link href="http://code-and-cocktails.herokuapp.com/blog/2011/04/11/writing-a-unit-test-framework-in-a-language-y/"/>
    <updated>2011-04-11T00:00:00-04:00</updated>
    <id>http://code-and-cocktails.herokuapp.com/blog/2011/04/11/writing-a-unit-test-framework-in-a-language-y</id>
    <content type="html"><![CDATA[<p>Tonight's session of the Boston Software Craftsmanship[1] meetup was about <br />playing with the Io language[2]. I didn't know anything about it before <br />it was announced as the topic for the next meeting. <p /> A couple weeks ago I started googling and trying to learn the language. <br />I tried finding a unit testing framework given my interest in TDD, but <br />didn't find anything (my lack of ability to search for anything was a <br />trend here). So I decide to try writing one on my own. Perhaps I was <br />remembering Kent Beck's example of this in his book[3]. <p /> Even with my lack of search skills I feel that I learned some <br />interesting things about the language. I think if I spent more than <br />one and a half hours at it, and if my searching had been useful, I could <br />have gotten farther. <p /> I think that I will make this a pattern for me. Right after "Hello <br />World" I'll play with a unit testing framework. <p /> At the session tonight we ended up ganging up on my little framework and <br />taking some of the next steps to improve it. It may not grow anymore - <br />but it has served its purpose. <p /> My basic unit test framework for the Io language can be found on <br />github[4]. (But Io does seem to have its own unit test framework built <br />in, but it is hard to find (.../libs/iovm/io/UnitTest.io). <br />It is built right into the VM, use it instead of mine please). <p />  <br />Footnotes: [1] <a href="http://groups.google.com/group/boston-software-craftsmanship">http://groups.google.com/group/boston-software-craftsmanship</a> <p /> [2] <a href="http://iolanguage.com">http://iolanguage.com</a> <p /> [3] <a href="http://www.amazon.com/Test-Driven-Development-Kent-Beck/dp/0321146530">http://www.amazon.com/Test-Driven-Development-Kent-Beck/dp/0321146530</a> <p /> [4] <a href="https://github.com/verdammelt/iounit">https://github.com/verdammelt/iounit</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[@nashjain at @boston_sc - Clean Code vs. Sufficient Design]]></title>
    <link href="http://code-and-cocktails.herokuapp.com/blog/2011/02/09/nashjain-at-bostonsc-clean-code-vs-sufficient/"/>
    <updated>2011-02-09T00:00:00-05:00</updated>
    <id>http://code-and-cocktails.herokuapp.com/blog/2011/02/09/nashjain-at-bostonsc-clean-code-vs-sufficient</id>
    <content type="html"><![CDATA[<p>I kept wanting to say something to the effect: "But no... you gotta make <br />the code clean..." (and I probably pretty much DID say that several <br />times).[1] <p /> But the point Naresh[2] made is valid: Spending lots of time on making sure <br />your code is clean may not be the best/most profitable way to spend your <br />time. <p /> I think a good way to summarize his point is: "If you have a good team <br />(which you trust), with smart people and tight collaboration with <br />customers, then the code is not important and will take care if itself". <br />He suggests an approach of building apps/features quickly (and perhaps <br />not entirely cleanly) so that you can get feedback from customers <br />quickly to determine if it is worth spending more time on it. This <br />makes sense - and if the app/feature is worth it you go back and make it <br />better. But if it is not worth it - you don't bother; it would be a <br />waste of time/money. <p /> The important issue here is what 'good enough' means. Naresh says that <br />you make this app/feature 'good enough'. He gives two different <br />examples: 1) a feature that they put together quickly and the <br />customer didn't care about so nothing more was done and 2) an app which <br />is being slowly and carefully crafted because the initial release needs <br />to be awesome. Both are "good enough" but "good enough" is very <br />different in each case. <p /> If the team doesn't agree on what "good enough" means then you have <br />problem there. Which brings up that this idea that the code will take <br />care of itself seems to be predicated on the fact you have a great team <br />with high customer collaboration. <p /> So what if you don't? <p /> Naresh answered this by asking if pushing strict TDD or Clean Code (TM) <br />was a good way to fix that situation. I can't say it is[3]. Education <br />seems to be the best thing. <p /> Educating my coworkers is something I realize I need to do - but I am <br />not sure how to go about doing it. We don't pair program - so I can't <br />directly "show". I need to find a way to do this. <p /> ----- <p /> Footnotes:</p>
<p>[1] I feel that my disagreements with Naresh's points are not entirely <br />logical and are based around my current lack of trust (and opinion <br />mismatch) with my current team. I agree that his approach is pragmatic - <br />I worry that 'pragmatism' can be the cover for lots of dumb stuff which <br />cause pain in the end. Again this goes back to a trust in the team - I <br />do not currently have trust in my current team and that is coloring my <br />opinion of how I think his suggestions could work. For them to work in <br />my current situation would involve a large change, not only of myself, <br />but of the organization and its members - which I don't think is likely <br />to happen (but is this opinion too just because I do not trust the <br />team?). <p /> [2] @nashjain <p /> [3] Although as Zach[4] pointed out: in my current situation, doing TDD <br />and making the code Clean(TM) is sort of a defensive strategy for me. <p /> [4] @zdsbs</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#bostonsc July 28 2010 meeting notes]]></title>
    <link href="http://code-and-cocktails.herokuapp.com/blog/2010/07/28/bostonsc-july-28-2010-meeting-notes/"/>
    <updated>2010-07-28T00:00:00-04:00</updated>
    <id>http://code-and-cocktails.herokuapp.com/blog/2010/07/28/bostonsc-july-28-2010-meeting-notes</id>
    <content type="html"><![CDATA[<h1>In Summary:</h1>

<p><em>Awesome!</em></p>

<h1>In Specific:</h1>

<h2>Presentation of Pairing Games</h2>

<p>The meeting started with a good presentation by Moss &amp; Laura from Cyrus
Innovation[1]. The presentation was their &ldquo;Pairing Games As Intentional
Practice&rdquo; talk which they will be giving at Agile2010[2].  The talk was
good and had interesting ideas about playing games with pairing like one
might play games with coding katas etc.  <em>e.g.</em> Do the pairing with some
specific restrictive rules such that lessons can be learned; activities
practiced etc.  They presented several games (Socrates, Silent
Programming) they have thought up along with the classic Ping Pong; and
guided us in the creation of our own game (One Minute Switching).</p>

<p>We put some of these games into practice when we went on to do a coding
kata.  I think it would be very beneficial to have the game playing in
the session; but their slot does not afford this.  I suggested that they
us an Open Jam[3] slot; they could announce it during their talk and
then guide the games during the Open Jam.  New games could be developed
as well.  I&rsquo;d love to hear about any new games that are developed.</p>

<h2>Coding Kata with Pairing Games</h2>

<p>After the presentation, and pizza we worked on the Tic-Tac-Toe kata.
We had five pairs and decided we&rsquo;d try out some of the pairing games.</p>

<h3>The One Minute Switching Game</h3>

<p>We started with the One Minute Switching we had designed in the
session.  The intention is to keep momentum going by setting a fast pace
of switching pairs every minute.  The pace was relentless and
unforgiving!  Every time we&rsquo;d start something we&rsquo;d switch.  I thought it
was a great game; it gave an urgency to all decisions and actions; but
definitely not something to do for too long.</p>

<p>The retrospective brought out similar feelings from the other people.</p>

<h3>The Socrates Game</h3>

<p>We switched and I got to pair with Abby [4].  I am so happy to get to
hang out with Abby again even if for a short time; she is so full of
energy and great ideas.  This probably helped making this paring session
really &lsquo;click&rsquo;.</p>

<p>Our game was the Socrates game which involves the Navigator asking
questions of the driver who must answer them after researching in the
code; or by changing the code to answer the question.  The group decided
that the new person to the pair would be the Driver as it would
facilitate them learning the &lsquo;new&rsquo; code.  It worked well; but all
pairing groups eventually move away from this game and went to a more
standard paring style after an initial use of the game.</p>

<p>Our retrospective on this game brought out the thoughts that perhaps
with so little code to learn/research the game was not well suited.</p>

<h3>The Silent Programming Game</h3>

<p>This was the &lsquo;hardest&rsquo; game.  There are two rules:</p>

<ol>
<li>No talking</li>
<li>Switch after three minutes if you haven&rsquo;t already switched.</li>
</ol>

<p>It was very hard for me to not want to just rip the keyboard away from
my paring partner every second.  I felt I monopolized the keyboard too
much in this case.  It did not help that my partner was not familiar
with C#/VS2010 which we were using on this machine.</p>

<p>The retrospective brought up the point that perhaps this game works best
when the knowledge level of the pair partners are roughly equal and they
both have a good understanding of what needs to get done in the next
roughly 30 minutes.</p>

<h3>My Quick Retrospective on the Code Katas</h3>

<p>I think for the future we should spend a few minutes to set up the
initial code needed so we have a failing first (generically named)
test.  Basically just something that says</p>

<div class="CodeRay">
  <div class="code"><pre><span class="directive">public</span> <span class="type">void</span> aTest() 
             { 
               <span class="keyword">assert</span>.Fail(<span class="string"><span class="delimiter">&quot;</span><span class="content">test something here</span><span class="delimiter">&quot;</span></span>); 
             }</pre></div>
</div>

<p>One or two &lsquo;iterations&rsquo; of the One Minute Switching game was spent just
doing this; as several of us were not entirely familiar with the IDE
etc.</p>

<p>On the other hand the One Minute Switching game was great for this; all
choices of the setup needed to be done quickly as the clock was ticking!</p>

<p>I also liked the quick retrospectives after each pair switch.  This
helped me learn a little from each paring session.</p>

<h1>In Conclusion</h1>

<p>This was a good session.  The Presentation was good and I want to hear
more about it.  If you are going to Agile2010 consider going to this
session.</p>

<p>This was especially great for me because I have limited/no opportunity
to pair program in my day job.  I find the practice engaging,
challenging, and even fun.  I&rsquo;m glad I got a chance to do some tonight.</p>

<hr />

<p>Footnotes:</p>

<p>[1]  @moss &amp; @lgdean on twitter; <a href="http://www.cyrusinnovation.com">www.cyrusinnovation.com</a>.</p>

<p>[2]  <a href="http://agile2010.com/team.html#5960">http://agile2010.com/team.html#5960</a></p>

<p>[3]  <a href="http://agile2010.com/specialevents.html">http://agile2010.com/specialevents.html</a></p>

<p>[4]  <a href="http://thehackerchickblog.com/">http://thehackerchickblog.com/</a> and @HackerChick on twitter.</p>

<p>[5]  <a href="http://agile2010.com">http://agile2010.com</a></p>
]]></content>
  </entry>
  
</feed>
